'From Pharo4.0 of 18 March 2013 [Latest update: #40607] on 14 April 2015 at 9:52:49.547808 am'!----STARTUP----2015-04-14T09:52:16.024237+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:52:53.433201+02:00 Pharo-40607.image priorSource: 0!----STARTUP----2015-04-14T09:53:10.503839+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:53:23.786467+02:00 Pharo-40607.image priorSource: 196!----STARTUP----2015-04-14T12:27:52.175891+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/14/2015 12:25' prior: 55184883!commentForCurrentUpdate ^ 'new .sources'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/14/2015 12:25'!script608	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-StephaneDucasse.35.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-StephaneDucasse.1091.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/14/2015 12:25'!update40608	"self new update40608"	self withUpdateLog: 'new .sources'.	self loadTogether: self script608 merge: false.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40607!ScriptLoader removeSelector: #script607!"ScriptLoader40"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.786.mcz') load.ScriptLoader new update40608.!----End fileIn----!----QUIT----2015-04-14T12:27:53.326572+02:00 Pharo.image priorSource: 376!----STARTUP----2015-04-14T12:27:53.4798+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-14T12:27:57.217802+02:00 Pharo.image priorSource: 15532!----STARTUP----2015-04-14T12:42:49.686617+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-14T12:42:49.754863+02:00 Pharo-40608.image priorSource: 15722!----STARTUP----2015-04-15T17:06:01.522135+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 4/15/2015 17:02' prior: 33555098!commentForCurrentUpdate ^ '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 4/15/2015 17:02'!script609	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 4/15/2015 17:02'!update40609	"self new update40609"	Smalltalk allClasses do: [ :each | each class organization comment: nil; commentStamp: nil ].	self withUpdateLog: '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'.	self loadTogether: self script609 merge: false.	[ | workspace window |		workspace := Workspace openContents: '"Pharo 4.0=========Welcome to Pharo, an immersive live programming environment.You can learn pharo by highlighting the next line and selecting [Do it] from the context menu:"PharoTutorial go."Pharo 4.0 already comes pre-loaded with a rich set of packages that you can use to explore the system and develop your own applications. However there is also a huge library of user contributed projects that you can also load using the ''Configurations Browser'' by executing:"MetacelloConfigurationBrowser open."This browser is also accessible from the World | Tools menu (just click the desktop, select Tools, and then Configuration Browser).You can find information about Pharo on http://www.pharo.org. Some useful starting points are:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 1600 issues treated in this release. Sumarized issues for 4.0:=========================New stuff---------- GTools (Playground, Inspector, Spotter)- Slots model instance variables as first class enities and enable meta-programming on this level.- ShoreLine reporter: submit information automatically when errors happen- TxModel, a modern text model who works with Athens (Preview)- OSWindow, a new way to handle windows and input events (Preview)- Glamour, a mature declarative browser builder- Dark themeUpdated stuff-------------- Zinc/Zodiac- Fuel- VersionnerAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo40ChangeLogs.md"'	label: 'Welcome to Pharo 4.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 4.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40608!ScriptLoader removeSelector: #script608!"ScriptLoader40"!!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 55982943!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !!SystemSystemSettings class methodsFor: 'settings' stamp: 'EstebanLorenzano 4/15/2015 15:03' prior: 58207175!systemSettingOn: aBuilder	<systemsettings>	(aBuilder group: #pharoSystem) 		label: 'System';		description: 'General system settings' ;		with: [			(aBuilder setting: #serverMode)				label: 'Server mode';				target: WorldState;				description: 'If enabled, then each main rendering loop will always wait a complete delay of 50ms' .			(aBuilder setting: #useLocale)				label: 'Use locale';				target: Locale;				selector: #activated;				description: 'Use the system locale to set the system language at startup.']! !!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 33587555!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !SmalltalkImage removeSelector: #shouldDownloadSourcesFile!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile:!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile!"Settings-System"!"System-Support"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-EstebanLorenzano.789.mcz') load.ScriptLoader new update40609.!----End fileIn----!----QUIT----2015-04-15T17:06:04.321261+02:00 Pharo.image priorSource: 15916!----STARTUP----2015-04-15T17:06:04.475077+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-15T17:06:08.61668+02:00 Pharo.image priorSource: 36763!----STARTUP----2015-04-15T17:17:40.057035+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-15T17:17:40.126384+02:00 Pharo-40609.image priorSource: 36957!----STARTUP----2015-04-23T13:55:03.41202+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/23/2015 13:52' prior: 33570647!commentForCurrentUpdate ^ '15349 The menu in the PharoTutorial has an erroneous label	https://pharo.fogbugz.com/f/cases/1534915375 backport pharo4: 15332 [Spec Help] protocol and protocol-events dont exist anymore	https://pharo.fogbugz.com/f/cases/15375'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/23/2015 13:52'!script610	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/23/2015 13:52'!update40610	"self new update40610"	self withUpdateLog: '15349 The menu in the PharoTutorial has an erroneous label	https://pharo.fogbugz.com/f/cases/1534915375 backport pharo4: 15332 [Spec Help] protocol and protocol-events dont exist anymore	https://pharo.fogbugz.com/f/cases/15375'.	self loadTogether: self script610 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40609!ScriptLoader removeSelector: #script609!"ScriptLoader40"!!HelpBrowser methodsFor: 'ui' stamp: 'SvenVanCaekenberghe 4/16/2015 21:29' prior: 26430124!menu	^ MenuMorph new		add: 'do it (d)' selector: #doIt;		add: 'print it (p)' selector: #printIt;		add: 'inspect it (i)' selector: #inspectIt;		yourself! !!SpecExamples class methodsFor: 'pages' stamp: 'BernardoContreras 4/17/2015 15:20' prior: 57222476!firstExample	^HelpTopic 		title: 'A first example: ModelList'		contents: 'Creating a specific UI always starts with the subclassing of Composable-Model. Each sub widget is stored into an instance variable of the newly created class. All the code presented here is already in the image so you can simply do: 			ModelList browseAnd follow the tutorial while browsing the code. So let''s subclass ComposableModel.	ComposableModel subclass: #ModelList	instanceVariableNames: ''list''	classVariableNames: ''	category: ''Spec-Examples''				The first required step then is to instantiate and define the sub widgets. This step is done in the method initializeWidgets. It creates the list and populates it with the required classes, in alphabetical order.	ModelList>>initializeWidgets	list := self newList.	list items: (AbstractWidgetModel allSubclasses	sorted: [:a :b | a name < b name ]).	self focusOrder add: list	The second required step is to define a layout, which is done on the class side. Since there is here only one sub widget, the layout is quite simple. It simply returns a layout that contains only the list:	ModelList class>>#defaultSpec	<spec: #default>	^ SpecLayout composed	add: #list;	yourself	The three last methods to define on ModelList are a getter, a method to display the UI title and a method to register to list selection changes.	"accessing"	ModelList>>list		^ list	"api"	ModelList>>title		^ ''Widgets''	"api-events"	ModelList>>whenSelectedItemChanged: aBlock		list whenSelectedItemChanged: aBlockThe first UI is now done. The result can be seen by executing the following snippet of code: 	ModelList new openWithSpec.'! !!SpecExamples class methodsFor: 'pages' stamp: 'BernardoContreras 4/17/2015 15:25' prior: 57224262!secondExample	^HelpTopic 		title: 'A second example: Protocol List'		contents: 'The next user interface is the protocol list. This UI combines two sub widgets: 		a list		a label.So again, we start by subclassing ComposableModel:	ComposableModel subclass: #ProtocolList	instanceVariableNames: ''label protocols''	classVariableNames: ''	category: ''Spec-Examples''	The initializeWidgets method for this UI is quite similar to the method in ModelList:	ProtocolList>>initializeWidgets		protocols := self newList.		label := self newLabel.		label text: ''Protocol''.		protocols displayBlock: [ :m | m selector ].		self focusOrder add: protocols	The layout method is quite different though. Now the sub widgets need to be placed more specifically than in the previous example, we have to build a layout that has a column with the label on top and the list taking all the space that is left.	ProtocolList class>>defaultSpec		<spec: #default>		^ SpecLayout composed		newColumn: [ :column |			column				add: #label					height: self toolbarHeight;					add: #protocols ];		yourself			The remaining methods are getters, sub widget delegation methods, a method to display the title, and a method to register to list selection changes: 	"accessing"	ProtocolList>>label		^ label	"accessing"	ProtocolList>>protocols		^ protocols	"api"	ProtocolList>>items: aCollection		protocols items: aCollection	"api"	ProtocolList>>label: aText		label label: aText	"api"	ProtocolList>>resetSelection		protocols resetSelection	"api"	ProtocolList>>title		^ ''Protocol widget''	"api-events"	ProtocolList>>whenSelectedItemChanged: aBlock		protocols whenSelectedItemChanged: aBlockThe ProtocolList UI can be seen by evaluating: ProtocolList new openWithSpec.'! !!LessonView methodsFor: 'gui' stamp: 'SvenVanCaekenberghe 4/16/2015 21:29' prior: 27700877!menu	^ MenuMorph new		add: 'do it (d)' selector: #doIt;		add: 'print it (p)' selector: #printIt;		add: 'inspect it (i)' selector: #inspectIt;		yourself! !!SpecHelpTopics class methodsFor: 'pages' stamp: 'BernardoContreras 4/17/2015 15:19' prior: 57227371!introduction	^HelpTopic 			title: 'About Spec'		contents: 'Spec has been originally developed by B. Van Ryseghem based on an idea of S. Ducasse. It is now maintained by the community and the pharo core team.. Spec is an attempt to support UI logic reuse. Spec is influenced by VisualWorks and Dolphin MVP in the sense that it recognizes the need for a Presenter or Application-Model class, in Spec called ComposableModel that manages the logic and the link between widgets and domain objects. Spec, following the tradition, uses value holders, simple object raising announcements when their values, often domain objects, change.'! !"HelpSystem-Core"!"ProfStef-Core"!"Spec-Help"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.790.mcz') load.ScriptLoader new update40610.!----End fileIn----!----QUIT----2015-04-23T13:55:05.772768+02:00 Pharo.image priorSource: 37150!----STARTUP----2015-04-23T13:55:05.929678+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-23T13:55:09.820052+02:00 Pharo.image priorSource: 57709!----STARTUP----2015-04-23T14:06:29.625404+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-23T14:06:29.693694+02:00 Pharo-40610.image priorSource: 57903!----STARTUP----2015-04-24T11:30:58.269253+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/24/2015 11:28' prior: 33591877!commentForCurrentUpdate ^ '15338 OrderedDictionary changes to merge	https://pharo.fogbugz.com/f/cases/1533815339 Monticello with spotter extension methods throws MNU errors when browsing packages in repos that dont contain every package	https://pharo.fogbugz.com/f/cases/15339'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/24/2015 11:28'!script611	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/24/2015 11:28'!update40611	"self new update40611"	self withUpdateLog: '15338 OrderedDictionary changes to merge	https://pharo.fogbugz.com/f/cases/1533815339 Monticello with spotter extension methods throws MNU errors when browsing packages in repos that dont contain every package	https://pharo.fogbugz.com/f/cases/15339'.	self loadTogether: self script611 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40610!ScriptLoader removeSelector: #script610!"ScriptLoader40"!!MCFileRepositoryInspector methodsFor: 'accessing' stamp: 'ThierryGoubier 4/15/2015 11:22' prior: 28331243!selectedPackageAncestors	selectedPackageAncestors		ifNil: [ 			selectedPackage				ifNotNil: [ 					(MCWorkingCopy registry at: (MCPackage named: selectedPackage) ifAbsent: [  ])						ifNotNil: [ :aWorkingCopy | selectedPackageAncestors := aWorkingCopy ancestry breadthFirstAncestors collect: #name ] ] ].	^ selectedPackageAncestors! !!OrderedIdentityDictionaryTest methodsFor: 'testing' stamp: 'monty 12/15/2014 16:44'!isTestingIdentityDictionary	^ true! !!MCVersionInfo methodsFor: 'initialization' stamp: 'ThierryGoubier 4/15/2015 09:41' prior: 28762933!initializeWithName: vName id: aUUID message: aString date: aDate time: aTime author: initials ancestors: aCollection stepChildren: stepCollection	name := vName.	id := aUUID.	message := aString.	date := aDate ifNil: [ Date today ].	time := aTime.	author := initials.	ancestors := aCollection.	stepChildren := stepCollection! !!OrderedDictionary methodsFor: 'adding' stamp: 'monty 4/14/2015 03:37' prior: 50556679!add: anAssociation	| oldSize |	oldSize := dictionary size.	dictionary add: anAssociation.	dictionary size > oldSize		ifTrue: [			orderedKeys size > oldSize				ifFalse: [self growOrderedKeys].			orderedKeys at: oldSize + 1 put: anAssociation key].	^ anAssociation.! !!OrderedDictionary methodsFor: 'accessing' stamp: 'monty 4/14/2015 03:13' prior: 50552150!associationAt: aKey ifPresent: aBlock	^ dictionary associationAt: aKey ifPresent: aBlock! !!OrderedDictionary methodsFor: 'accessing' stamp: 'monty 4/14/2015 03:38' prior: 50552686!at: aKey put: aValue	| oldSize |	oldSize := dictionary size.	dictionary at: aKey put: aValue.	dictionary size > oldSize		ifTrue: [			orderedKeys size > oldSize				ifFalse: [self growOrderedKeys].			orderedKeys at: oldSize + 1 put: aKey].	^ aValue.! !!OrderedDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 03:12' prior: 50557786!errorInvalidIndex: anIndex	SubscriptOutOfBounds signalFor: anIndex! !!OrderedDictionary methodsFor: 'accessing' stamp: 'monty 4/14/2015 02:20'!identityIndexOfKey: aKey	^ self identityIndexOfKey: aKey ifAbsent: [0]! !!OrderedDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 02:19'!orderedKeysIndexOf: aKey	^ orderedKeys indexOf: aKey! !!OrderedDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 03:36'!orderedKeysRemove: aRemovedKey	| index |	index := self orderedKeysIndexOf: aRemovedKey.	"shift every remaining key after to the left by one"	orderedKeys		replaceFrom: index		to: self size		with: orderedKeys		startingAt: index + 1.	"one key was removed and the rest shifted, so nil what was the last	key slot before removing and shifting"	orderedKeys		at: self size + 1		put: nil.! !!OrderedDictionary methodsFor: 'removing' stamp: 'monty 4/14/2015 01:26' prior: 50552529!removeKey: aKey	| value |	value := dictionary removeKey: aKey.	self orderedKeysRemove: aKey.	^ value.! !!OrderedDictionary methodsFor: 'removing' stamp: 'monty 4/14/2015 01:26' prior: 50549581!removeKey: aKey ifAbsent: aBlock	| oldSize value |	oldSize := dictionary size.	value := dictionary removeKey: aKey ifAbsent: aBlock.	dictionary size < oldSize		ifTrue: [self orderedKeysRemove: aKey].	^ value.! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:44' prior: 50576809!absentKey	self isTestingIdentityDictionary		ifTrue: [^ self identityAbsentKey]		ifFalse: [^ self nonIdentityAbsentKey]! !!OrderedDictionaryTest methodsFor: 'assertions' stamp: 'monty 12/15/2014 16:50'!assertRemovedKey: aKey from: aDictionary	self deny: (aDictionary includesKey: aKey).	aDictionary keys asArray, aDictionary orderedKeys asArray do: [:each |		self deny:			(self isTestingIdentityDictionary				ifTrue: [each == aKey]				ifFalse: [each = aKey])].! !!OrderedDictionaryTest methodsFor: 'assertions' stamp: 'monty 12/14/2014 16:35' prior: 50579258!assertSelector: aSelector collects: aCollection from: aDictionary	self		assert: (self emptyDictionary perform: aSelector) asArray = #();		assert: (aDictionary perform: aSelector) asArray = aCollection asArray! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:36' prior: 50586042!defaultCapacity	^ self emptyInternalDictionary capacity! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:44' prior: 50584960!dictionaryAssociations	self isTestingIdentityDictionary		ifTrue: [^ self identityDictionaryAssociations]		ifFalse: [^ self nonIdentityDictionaryAssociations]! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:34'!emptyInternalDictionary	^ self internalDictionaryClass new! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:44' prior: 50579135!internalDictionaryClass	self isTestingIdentityDictionary		ifTrue: [^ IdentityDictionary]		ifFalse: [^ Dictionary]! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:37'!internalDictionaryWithSingleAssociation	^ self internalDictionaryClass with: self singleAssociation! !!OrderedDictionaryTest methodsFor: 'testing' stamp: 'monty 12/15/2014 16:44'!isTestingIdentityDictionary	^ false! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:08'!nonIdentityAbsentKey	^ 'absentKey'! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:08'!nonIdentityDictionaryAssociations	"Associations are grouped out of their natural sort order and	are copied so can be modified in one test without affecting others,	but the keys and values are identical each time for identity tests."	dictionaryAssociations ifNil: [		dictionaryAssociations :=		Array			with: 'testKey'->'testValue'			with: 'testKey3'->'testValue3'			with: 'testKey2'->'testValue2'			with: 'testKey4'->'testValue4'].	^ dictionaryAssociations collect: [:each | each copy].! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 16:43'!testDictionary	| dictionary |	dictionary := self emptyDictionary.	self		assert: dictionary dictionary class == self internalDictionaryClass;		assert: dictionary dictionary = self emptyInternalDictionary.	dictionary := self dictionaryWithSingleAssociation.	self		assert: dictionary dictionary class == self internalDictionaryClass;		assert: dictionary dictionary = self internalDictionaryWithSingleAssociation.	dictionary := self dictionaryWithAssociations.	self		assert: dictionary dictionary class == self internalDictionaryClass;		assert: dictionary dictionary = self internalDictionaryWithAssociations.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 16:36' prior: 50574882!testEqualsDictionary	| orderedDictionary unorderedDictionary |	"only works on Pharo"	orderedDictionary := self emptyDictionary.	unorderedDictionary := self emptyInternalDictionary.	unorderedDictionary = orderedDictionary		ifFalse: [^ self].	self assertDictionary: orderedDictionary equals: unorderedDictionary.	orderedDictionary addAll: self dictionaryAssociations.	self assertDictionary: orderedDictionary doesNotEqual: unorderedDictionary.		"Dictionary>>addAll: can only accept keyed collections as an argument, so newFrom: is	used instead."	unorderedDictionary := self internalDictionaryWithAssociations.	self assertDictionary: orderedDictionary equals: unorderedDictionary.	unorderedDictionary := self internalDictionaryClass newFrom: self dictionaryAssociations reversed.	self assertDictionary: orderedDictionary equals: unorderedDictionary.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 16:41' prior: 50564184!testHash	| dictionary |	dictionary := self emptyDictionary.	self assert: dictionary hash = self emptyDictionary hash.	self emptyInternalDictionary hash =		self internalDictionaryWithSingleAssociation hash		ifFalse: [			self deny:				dictionary hash = self dictionaryWithSingleAssociation hash].	self emptyInternalDictionary hash = self internalDictionaryWithAssociations hash		ifFalse: [self deny: dictionary hash = self dictionaryWithAssociations hash].	dictionary := self dictionaryWithSingleAssociation.	self assert: dictionary hash = self dictionaryWithSingleAssociation hash.	(self internalDictionaryWithSingleAssociation hash =		self internalDictionaryWithAssociations hash)		ifFalse: [self deny: dictionary hash = self dictionaryWithAssociations hash].	dictionary := self dictionaryWithAssociations.	self assert: dictionary hash = self dictionaryWithAssociations hash.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 02:30'!testIdentityIndexOfKey	| dictionary |	dictionary := self dictionaryWithAssociations.	dictionary keys withIndexDo: [:each :i |		self			assert: (dictionary identityIndexOfKey: each) = i;			assert: (dictionary identityIndexOfKey: each copy) isZero].	self assert: (dictionary identityIndexOfKey: self absentKey) isZero.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 02:29'!testIdentityIndexOfKeyIfAbsent	| dictionary |	dictionary := self dictionaryWithAssociations.	dictionary keys withIndexDo: [:each :i |		self			assert: (dictionary identityIndexOfKey: each ifAbsent: [self absentValue]) = i;			assert:				(dictionary					identityIndexOfKey: each copy					ifAbsent: [self absentValue]) = self absentValue].	self assert:		(dictionary			identityIndexOfKey: self absentKey			ifAbsent: [self absentValue]) = self absentValue.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 02:27' prior: 50589911!testIndexOfKeyIfAbsent	| dictionary |	dictionary := self dictionaryWithAssociations.	dictionary keys withIndexDo: [:each :i |		self assert: (dictionary indexOfKey: each ifAbsent: [self absentValue]) = i].	self assert:		(dictionary			indexOfKey: self absentKey			ifAbsent: [self absentValue]) = self absentValue.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 03:21' prior: 50591000!testKeyAtIdentityValue	| dictionary singleValue |	dictionary := self dictionaryWithSingleAssociation.	singleValue := dictionary at: self singleKey.	self		should: [dictionary keyAtIdentityValue: self absentValue] raise: Error;		should: [dictionary keyAtIdentityValue: singleValue copy] raise: Error;		assert: (dictionary keyAtIdentityValue: singleValue) = self singleKey.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 03:20' prior: 50586183!testKeyAtIdentityValueIfAbsent	| dictionary singleValue |	dictionary := self dictionaryWithSingleAssociation.	singleValue := dictionary at: self singleKey.	self assert:		(dictionary			keyAtIdentityValue: self absentValue			ifAbsent: [self absentKey]) = self absentKey.	self assert:		(dictionary			keyAtIdentityValue: singleValue copy			ifAbsent: [self absentKey]) = self absentKey.	self assert:		(dictionary			keyAtValue: singleValue			ifAbsent: [self absentKey]) = self singleKey.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 15:58' prior: 50569249!testRemoveKey	| dictionary associationsToRemove |	dictionary := self dictionaryWithAssociations.	self should: [dictionary removeKey: self absentKey] raise: Error.	associationsToRemove := self dictionaryAssociations asOrderedCollection.	[associationsToRemove notEmpty]		whileTrue: [ | removed |			removed := associationsToRemove removeFirst.			self				assert: (dictionary removeKey: removed key) = removed value;				should: [dictionary removeKey: removed key] raise: Error;				assertRemovedKey: removed key from: dictionary;				assert: dictionary keys = (associationsToRemove collect: [:each | each key]) asArray].! !!OrderedIdentityDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 02:20'!orderedKeysIndexOf: aKey	^ orderedKeys identityIndexOf: aKey! !!MCLazyVersionInfo methodsFor: 'initialization' stamp: 'ThierryGoubier 4/15/2015 09:41' prior: 28471913!initializeWithName: vName id: aUUID message: aString date: aDate time: aTime author: initials ancestors: aCollection stepChildren: stepCollection	name := vName.	id := aUUID.	message := aString.	date := aDate ifNil: [ Date today ].	time := aTime.	author := initials.	ancestors := WeakArray withAll: aCollection.	stepChildren := WeakArray withAll: stepCollection! !OrderedDictionary removeSelector: #deleteOrderedKey:!OrderedIdentityDictionaryTest removeSelector: #internalDictionaryClass!OrderedIdentityDictionaryTest removeSelector: #dictionaryAssociations!OrderedIdentityDictionaryTest removeSelector: #absentKey!"Collections-Sequenceable"!"CollectionsTests"!"Monticello"!"MonticelloGUI"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.791.mcz') load.ScriptLoader new update40611.!----End fileIn----!----QUIT----2015-04-24T11:31:04.158257+02:00 Pharo.image priorSource: 58097!----STARTUP----2015-04-24T11:31:04.314727+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-24T11:31:08.184451+02:00 Pharo.image priorSource: 86474!----STARTUP----2015-04-24T11:41:04.485005+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-24T11:41:04.561394+02:00 Pharo-40611.image priorSource: 86668!----STARTUP----2015-05-04T10:36:15.561429+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 5/4/2015 10:33' prior: 33612825!commentForCurrentUpdate ^ '15417 TestRunner does not offer the RunCoverage functionality 	https://pharo.fogbugz.com/f/cases/1541715322 "Save As" does not properly save filenames with dots in them	https://pharo.fogbugz.com/f/cases/15322'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 5/4/2015 10:33'!script612	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 5/4/2015 10:33'!update40612	"self new update40612"	self withUpdateLog: '15417 TestRunner does not offer the RunCoverage functionality 	https://pharo.fogbugz.com/f/cases/1541715322 "Save As" does not properly save filenames with dots in them	https://pharo.fogbugz.com/f/cases/15322'.	self loadTogether: self script612 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40611!ScriptLoader removeSelector: #script611!"ScriptLoader40"!!FileReferenceTest methodsFor: 'tests' stamp: 'monty 4/9/2015 23:34' prior: 23421577!testBasenameWithoutExtension	"self debug: #testBasenameWithoutExtension"		| ref |		ref := filesystem root.	self assert: ref basename equals: '/'.		ref := filesystem * 'plonk' / 'griffle'.	self assert: ref basenameWithoutExtension equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'griffle') equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'taz') equals: 'griffle'.		ref := filesystem * 'plonk' / 'griffle.taz'.	self assert: ref basenameWithoutExtension equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'taz') equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'griffle.taz') equals: 'griffle.taz'.	self assert: (ref basenameWithoutExtension: 'zork') equals: 'griffle.taz'.		ref := filesystem * 'plonk' / 'griffle.taz.zork'.	self assert: ref basenameWithoutExtension equals: 'griffle.taz'.	self assert: (ref basenameWithoutExtension: 'zork') equals: 'griffle.taz'.	self assert: (ref basenameWithoutExtension: 'taz.zork') equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'griffle.taz.zork') equals: 'griffle.taz.zork'.	self assert: (ref basenameWithoutExtension: 'taz') equals: 'griffle.taz.zork'.! !!AbstractFileReference methodsFor: 'accessing' stamp: 'monty 4/9/2015 23:28'!basenameWithoutExtension: anExtension	"Returns the basename without specified extension (if any)	('/foo/gloops.taz' asFileReference basenameWithoutExtension: 'taz') = 'gloops'	"	^ self fullPath basenameWithoutExtension: anExtension! !!PathTest methodsFor: 'tests' stamp: 'monty 4/9/2015 23:33' prior: 50992571!testBasenameWithoutExtension	"self debug: #testBasenameWithoutExtension"	| path |	path := Path * 'plonk' / 'griffle'.	self assert: path basenameWithoutExtension equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'griffle') equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'taz') equals: 'griffle'.		path := Path * 'plonk' / 'griffle.taz'.	self assert: path basenameWithoutExtension equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'taz') equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'griffle.taz') equals: 'griffle.taz'.	self assert: (path basenameWithoutExtension: 'zork') equals: 'griffle.taz'.		path := Path * 'plonk' / 'griffle.taz.zork'.	self assert: path basenameWithoutExtension equals: 'griffle.taz'.	self assert: (path basenameWithoutExtension: 'zork') equals: 'griffle.taz'.	self assert: (path basenameWithoutExtension: 'taz.zork') equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'girffle.taz.zork') equals: 'griffle.taz.zork'.	self assert: (path basenameWithoutExtension: 'taz') equals: 'griffle.taz.zork'.! !!TestRunner methodsFor: 'accessing-ui' stamp: 'SergioFedi 4/27/2015 21:47' prior: 58630987!buttons	^ #(( 'Run Selected' #runAll 'Run all selected tests' #hasRunnable )		( 'Run Profiled' #runProfiled 'Run tests and profile' #hasRunnable )		( 'Run Coverage' #runCoverage 'Run test and check code coverage' #hasRunnable )		( 'Run Failures' #runFailures 'Run all failures' #hasFailures )		( 'Run Errors' #runErrors 'Run all errors' #hasErrors )		( 'File out results' #fileOutResults 'File out test results' #hasFailuresOrErrors))! !!TestRunner methodsFor: 'actions' stamp: 'SergioFedi 4/27/2015 21:48' prior: 58614643!collectCoverageFor: methods	| wrappers suite |	wrappers := methods collect: [ :each | TestCoverage on: each ].	suite := self		resetResult;		suiteForAllSelected.		[ wrappers do: [ :each | each install ].	[ self runSuite: suite ] ensure: [ wrappers do: [ :each | each uninstall ] ] ] valueUnpreemptively.	wrappers := wrappers reject: [:each | each hasRun].	wrappers := wrappers collect: [:each | each reference].	wrappers isEmpty 		ifTrue:  [ UIManager default inform: 'Congratulations. Your tests cover all code under analysis.' ]		ifFalse: [ 			Smalltalk tools messageList 				browse: wrappers				title: 'Not Covered Code (' , (100 - (100 * wrappers size // methods size)) printString , '% Code Coverage)'].	self saveResultInHistory! !!Path methodsFor: 'accessing' stamp: 'monty 4/9/2015 23:28'!basenameWithoutExtension: anExtension	"Returns the basename without specified extension (if any)	('/foo/gloops.taz' asPath basenameWithoutExtension: 'taz') = 'gloops'	"	| extensionWihtDelimiter |	extensionWihtDelimiter := anExtension copyWithFirst: self extensionDelimiter.	(self basename endsWith: extensionWihtDelimiter)		ifTrue: [^ self basename allButLast: extensionWihtDelimiter size]		ifFalse: [ ^ self basename ]! !!WorldState class methodsFor: 'world menu items' stamp: 'monty 4/9/2015 23:29' prior: 61812197!saveAs	| reference |	reference := UIManager default fileSave: 'New File Name?' extensions: #('image') path: Smalltalk imageDirectory.	reference ifNotNil: [ Smalltalk saveAs: reference parent / (reference basenameWithoutExtension: 'image') ]! !"FileSystem-Core"!"FileSystem-Tests-Core"!"Morphic-Core"!"SUnit-UI"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.792.mcz') load.ScriptLoader new update40612.!----End fileIn----!----QUIT----2015-05-04T10:36:19.183664+02:00 Pharo.image priorSource: 86862!----STARTUP----2015-05-04T10:36:19.338418+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-05-04T10:36:23.139051+02:00 Pharo.image priorSource: 107478!----STARTUP----2015-05-04T10:45:08.078705+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-05-04T10:45:08.150291+02:00 Pharo-40612.image priorSource: 107672!----STARTUP----2015-05-05T15:47:04.643301+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 5/5/2015 15:45' prior: 33641589!commentForCurrentUpdate ^ '15423 Backport Pharo4: 15422 SHTextStyler>>#styleInBackgroundProcess: should not set the text if styling process was terminated	https://pharo.fogbugz.com/f/cases/1542315492 Backport Nautilus MergeGroups + sourceNodeForPC should use #methodNode	https://pharo.fogbugz.com/f/cases/15492'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 5/5/2015 15:45'!script613	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2013.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 5/5/2015 15:45'!update40613	"self new update40613"	self withUpdateLog: '15423 Backport Pharo4: 15422 SHTextStyler>>#styleInBackgroundProcess: should not set the text if styling process was terminated	https://pharo.fogbugz.com/f/cases/1542315492 Backport Nautilus MergeGroups + sourceNodeForPC should use #methodNode	https://pharo.fogbugz.com/f/cases/15492'.	self loadTogether: self script613 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40612!ScriptLoader removeSelector: #script612!"ScriptLoader40"!!SHTextStyler methodsFor: 'styling' stamp: 'AndreiChis 5/4/2015 13:31' prior: 54999964!styleInBackgroundProcess: aText	self terminateBackgroundStylingProcess.	stylingEnabled		ifFalse: [ ^ self ].	text := aText copy.	self monitor		critical: [ 			sem := Semaphore new.			[ 				sem notNil					ifTrue: [ 						sem 							waitTimeoutSeconds: 5							onCompletion: [ view ifNotNil: [ view stylerStyledInBackground: text ] ]							onTimeout: [ "do nothing if the styling has not finished or the process turned into a zombie." ] ] 			] forkAt: Processor activePriority.			backgroundProcess := [ 			self privateStyle: text.			sem signal ] forkAt: Processor userBackgroundPriority ]! !!DelayWaitTimeout methodsFor: 'waiting' stamp: 'AndreiChis 5/4/2015 13:30'!waitOnCompletion: completionBlock onTimeout: timeoutBlock	"Wait until either the semaphore is signaled or the delay times out.	If the delay times out execute timeoutBlock, otherwise if the semaphore is signaled execute completionBlock.	Return the value returned by the executed block."	^ self wait		ifTrue: [ timeoutBlock value ]		ifFalse: [ completionBlock value]! !!SemaphoreTest methodsFor: 'tests' stamp: 'AndreiChis 5/4/2015 13:31'!testWaitTimeoutSecondsOnCompletionOnTimeout	"Ensure that waitTimeoutSeconds:onCompletion:onTimeout: behaves properly"	"Ensure that a timed out waitTimeoutSeconds:onCompletion:onTimeout: returns the value of the timeout block"	self assert: (Semaphore new 		waitTimeoutSeconds: 0.05		onCompletion: [ #completed ]		onTimeout: [ #timeout ] ) == #timeout.	"Ensure that a signaled waitTimeoutSeconds:onCompletion:onTimeout: returns the value of the completed block"	self assert: (Semaphore new signal		waitTimeoutSeconds: 0.05		onCompletion: [ #completed ]		onTimeout: [ #timeout ]) == #completed.! !!AbstractTool methodsFor: 'group' stamp: 'MarcusDenker 5/5/2015 15:10' prior: 17544396!mergeGroups: aCollection	aCollection		ifNotEmpty: [:groups || group |			group := groups reduce: [:a :b | a or: b].			groups do: [:gp | 				gp removable					ifTrue: [self groupsManager removeAGroupSilently: gp]].				^ group].	^ nil! !!RBBlockNode methodsFor: '*OpalCompiler-Core' stamp: 'MarcusDenker 5/5/2015 15:10' prior: 52182722!sourceNodeForPC: anInteger 	^ self methodNode sourceNodeForPC: anInteger! !!Semaphore methodsFor: 'communication' stamp: 'AndreiChis 5/4/2015 13:31'!waitTimeoutSeconds: anInteger onCompletion: completionBlock onTimeout: timeoutBlock	"Wait on this semaphore for up to the given number of seconds, then timeout.	If the deadline expired execute timeoutBlock, otherwise execute completionBlock.	Return the value returned by the executed block."	| d |	d := DelayWaitTimeout new setDelay: (anInteger * 1000 max: 0) forSemaphore: self.	^d waitOnCompletion: completionBlock onTimeout: timeoutBlock! !"Kernel"!"KernelTests"!"OpalCompiler-Core"!"Shout"!"Tool-Base"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.793.mcz') load.ScriptLoader new update40613.!----End fileIn----!----QUIT----2015-05-05T15:47:10.552244+02:00 Pharo.image priorSource: 107867!----STARTUP----2015-05-05T15:47:10.712169+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-05-05T15:47:14.435205+02:00 Pharo.image priorSource: 126487!----STARTUP----2015-05-05T15:56:45.728351+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-05-05T15:56:45.798918+02:00 Pharo-40613.image priorSource: 126682!----STARTUP----2015-05-26T16:27:18.934807+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 5/26/2015 16:25' prior: 33662595!commentForCurrentUpdate ^ '15284 [Backport 4.0]: 15384 kommiter throws DNU when browsing remotes	https://pharo.fogbugz.com/f/cases/15284'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 5/26/2015 16:25'!script614	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2013.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 5/26/2015 16:25'!update40614	"self new update40614"	self withUpdateLog: '15284 [Backport 4.0]: 15384 kommiter throws DNU when browsing remotes	https://pharo.fogbugz.com/f/cases/15284'.	self loadTogether: self script614 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40613!ScriptLoader removeSelector: #script613!"ScriptLoader40"!!RemotesManager methodsFor: 'private' stamp: 'SeanDeNigris 4/4/2015 09:32' prior: 54039491!buildRoots	^ MCRepositoryGroup default repositories		select: [ :each | each isCache not ]		thenCollect: [ :each || remote  |						remote := each koRemote.			TreeNodeModel new				content: remote;				hasContentToShow: true;				selected: ( self selectedRemotes includes: each );				whenSelectedChanged: [ :bool | self selected: each changed: bool ] ;				yourself ]! !!RemotesManager methodsFor: 'private' stamp: 'SeanDeNigris 4/4/2015 09:32' prior: 54039163!selected: aRepository changed: selected	selected		ifTrue: [ self selectedRemotes add: aRepository ]		ifFalse: [ self selectedRemotes remove: aRepository ].	selectedChangedBlock ifNotNil: 		[ selectedChangedBlock cull: aRepository cull: selected ] ! !!RemotesManager methodsFor: 'api' stamp: 'SeanDeNigris 4/4/2015 09:34' prior: 54040083!selectedRemotes: aRemoteList	selectedRemotes := aRemoteList asSet! !"Komitter"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.794.mcz') load.ScriptLoader new update40614.!----End fileIn----!----QUIT----2015-05-26T16:27:20.757246+02:00 Pharo.image priorSource: 126877!----STARTUP----2015-05-26T16:27:20.912563+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-05-26T16:27:24.898441+02:00 Pharo.image priorSource: 143201!----STARTUP----2015-05-26T16:36:46.010192+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-05-26T16:36:46.084005+02:00 Pharo-40614.image priorSource: 143396!----STARTUP----2015-06-23T10:43:18.96833+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 6/23/2015 10:41' prior: 33681606!commentForCurrentUpdate ^ '15797 Backport 4.0: New PackageManifests should be classes, not instances	https://pharo.fogbugz.com/f/cases/15797'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 6/23/2015 10:41'!script615	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 6/23/2015 10:41'!update40615	"self new update40615"	self withUpdateLog: '15797 Backport 4.0: New PackageManifests should be classes, not instances	https://pharo.fogbugz.com/f/cases/15797'.	self loadTogether: self script615 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40614!ScriptLoader removeSelector: #script614!"ScriptLoader40"!!TheManifestBuilder commentStamp: 'StephaneDucasse 1/6/2014 20:52' prior: 59049974!I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*.!!PackageTreeNautilusTest methodsFor: 'tests' stamp: 'ChristopheDemarey 6/18/2015 15:08' prior: 50747168!testPackagePatternStringRootPackageTag	lastValue := SharedPackageFilterPatternsHolder instance lastValue.	SharedPackageFilterPatternsHolder instance lastValue: ''.	self compiledMethod: (Object>>#=).	nautilus := PackageTreeNautilus openOnMethod: compiledMethod.	self assertSelectedCompiledMethod.	nautilus packagePatternString: 'H'.	self assertSelectedCompiledMethod.	nautilus packagePatternString: 'anything long'.	self assertSelectedCompiledMethod.	nautilus packagePatternString: ''.	self assertSelectedCompiledMethod.! !!PackageManifest class methodsFor: 'code-critics' stamp: 'ChristopheDemarey 6/18/2015 13:46'!rejectClasses	^ #()! !!PackageManifest class methodsFor: 'code-critics' stamp: 'ChristopheDemarey 6/18/2015 13:46'!rejectRules	^ #()! !!RPackage methodsFor: '*Manifest-Core' stamp: 'ChristopheDemarey 6/18/2015 13:48' prior: 53582145!packageManifest	^ self classes		detect: [ :each | each isManifest ]		ifNone: [ TheManifestBuilder new createManifestNamed: name]! !!TheManifestBuilder commentStamp: 'StephaneDucasse 1/6/2014 20:52' prior: 33712864!I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*.!!TheManifestBuilder methodsFor: 'private' stamp: 'ChristopheDemarey 6/18/2015 13:54' prior: 59064401!compileSelector: selector returnValue: arrayString	manifestClass class		compile: selector asString , Character cr asString , '^ ' , arrayString 		classified: 'code-critics'! !!TheManifestBuilder methodsFor: 'accessing' stamp: 'ChristopheDemarey 6/18/2015 13:53' prior: 59064957!manifest	^ manifestClass! !PackageManifest removeSelector: #rejectRules!PackageManifest removeSelector: #rejectClasses!PackageManifest removeSelector: #hash!PackageManifest removeSelector: #=!"Kernel"!"Manifest-Core"!"Nautilus-Tests"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.795.mcz') load.ScriptLoader new update40615.!----End fileIn----!----QUIT----2015-06-23T10:43:23.558445+02:00 Pharo.image priorSource: 143591!----STARTUP----2015-06-23T10:43:23.717223+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-06-23T10:43:27.497364+02:00 Pharo.image priorSource: 161284!----STARTUP----2015-06-23T10:52:11.21743+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-06-23T10:52:11.293573+02:00 Pharo-40615.image priorSource: 161479!----STARTUP----2015-06-29T10:38:16.525934+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 6/29/2015 10:36' prior: 33698319!commentForCurrentUpdate ^ '15680 Backport 4.0: Class rename does not update references in class-side methods	https://pharo.fogbugz.com/f/cases/15680'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 6/29/2015 10:36'!script616	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 6/29/2015 10:36'!update40616	"self new update40616"	self withUpdateLog: '15680 Backport 4.0: Class rename does not update references in class-side methods	https://pharo.fogbugz.com/f/cases/15680'.	self loadTogether: self script616 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40615!ScriptLoader removeSelector: #script615!"ScriptLoader40"!!RBNamespace methodsFor: 'accessing' stamp: 'ThomasHeniart 6/12/2015 10:08' prior: 52664882!allReferencesToClass: aRBClass do: aBlock	self		allClassesDo: [ :each | 			(each whichSelectorsReferToClass: aRBClass) do: [ :sel | aBlock value: (each methodFor: sel) ].			(each theMetaClass whichSelectorsReferToClass: aRBClass)				do: [ :sel | aBlock value: (each theMetaClass methodFor: sel) ] ]! !!RBRenameClassRefactoring methodsFor: 'initialize-release' stamp: 'ThomasHeniart 6/12/2015 10:09' prior: 53058623!className: aName newName: aNewName	className := aName asSymbol.	class := self model classNamed: className.	newName := aNewName asSymbol! !"Refactoring-Core"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.796.mcz') load.ScriptLoader new update40616.!----End fileIn----!----QUIT----2015-06-29T10:38:18.397657+02:00 Pharo.image priorSource: 161673!----STARTUP----2015-06-29T10:38:18.576311+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-06-29T10:38:22.689866+02:00 Pharo.image priorSource: 177713!----STARTUP----2015-06-29T10:51:13.319291+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-06-29T10:51:13.402172+02:00 Pharo-40616.image priorSource: 177908!----STARTUP----2015-06-30T16:02:18.919025+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 6/30/2015 16:00' prior: 33716402!commentForCurrentUpdate ^ '14387 ressurrect format on accept and format on display	https://pharo.fogbugz.com/f/cases/14387'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 6/30/2015 16:00'!script617	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 6/30/2015 16:00'!update40617	"self new update40617"	self withUpdateLog: '14387 ressurrect format on accept and format on display	https://pharo.fogbugz.com/f/cases/14387'.	self loadTogether: self script617 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40616!ScriptLoader removeSelector: #script616!"ScriptLoader40"!!RBConfigurableFormatter commentStamp: '<historical>' prior: 52318551!RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute "RBProgramNode formatterClass: RBConfigurableFormatter". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source.!!MethodDefinitionAcceptor methodsFor: 'protocol' stamp: 'PaulDeBruicker 6/10/2015 13:47' prior: 30708185!accept: source notifying: aController	| protocol method |	RBConfigurableFormatter formatOnAccept		ifTrue: [ self model sourceTextArea formatSourceCode ].	protocol := self model selectedCategory.	method := self model selectedMethod.	protocol ifNil: [ protocol := method ifNil: [ Protocol unclassified ] ifNotNil: [ method protocol ] ].	self model compileAMethodFromCategory: protocol withSource: source notifying: aController! !!SHTextStyler methodsFor: 'formatting' stamp: 'PaulDeBruicker 6/10/2015 13:47' prior: 54998777!format: aText 	| tree |	self terminateBackgroundStylingProcess.	RBConfigurableFormatter formatOnDisplay		ifTrue: [ 			tree := RBParser parseMethod: aText onError: [ :msg :pos | ^ aText ].			^ tree formattedCode ]		ifFalse: [ ^ aText ]! !!RubSHTextStylerST80 methodsFor: 'private' stamp: 'PaulDeBruicker 6/11/2015 17:14'!format: aText	self terminateBackgroundStylingProcess.	^ aText! !!RBConfigurableFormatter commentStamp: '<historical>' prior: 33747331!RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute "RBProgramNode formatterClass: RBConfigurableFormatter". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source.!!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:44'!formatOnAccept	^FormatOnAccept ifNil:[false]! !!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:45'!formatOnAccept:aBoolean	FormatOnAccept :=aBoolean! !!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:44'!formatOnDisplay	^FormatOnDisplay ifNil:[false]! !!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:44'!formatOnDisplay:aBoolean	FormatOnDisplay :=aBoolean! !!RBConfigurableFormatter class methodsFor: 'initialization' stamp: 'PaulDeBruicker 6/10/2015 13:45' prior: 52338947!initialize	CascadedMessageInsideParentheses := false.	FormatCommentWithStatements := true.	IndentString := String with: Character tab.	IndentsForKeywords := 1.	KeepBlockInMessage := true.	LineUpBlockBrackets := false.	MaxLineLength := 120.	MethodSignatureOnMultipleLines := false.	MinimumNewLinesBetweenStatements := 1.	MultiLineMessages := #(#ifTrue:ifFalse: #ifFalse:ifTrue: #ifTrue: #ifFalse: #on:do: #ensure: #ifCurtailed:).	NewLineAfterCascade := true.	NewLineBeforeFirstCascade := true.	NewLineBeforeFirstKeyword := false.	NewLinesAfterMethodComment := 2.	NewLinesAfterMethodPattern := 1.	NewLinesAfterTemporaries := 1.	NumberOfArgumentsForMultiLine := 4.	OneLineMessages := #(#to: #to:do: #to:by: #to:by:do:).	PeriodsAtEndOfBlock := false.	PeriodsAtEndOfMethod := false.	RetainBlankLinesBetweenStatements := false.	RetainBlankLinesBeforeComments := false.	StringFollowingReturn := ' '.	StringInsideBlocks := ' '.	StringInsideParentheses := ''.	TraditionalBinaryPrecedence := #(#($| $& $?) #($= $~ $< $>) #($- $+) #($* $/ $% $\) #($@)).	UseTraditionalBinaryPrecedenceForParentheses := true.	FormatOnAccept := false.	FormatOnDisplay := false! !!RBConfigurableFormatter class methodsFor: 'settings' stamp: 'PaulDeBruicker 6/10/2015 13:46' prior: 52344181!settingsOn: aBuilder	<systemsettings>	(aBuilder group: #configurableFormatter)		target: self;		parent: #codeBrowsing;		label: 'Pretty Printing';		description: 'Settings related to the formatter';		with: [ 					(aBuilder setting: #cascadedMessageInsideParentheses) label: 'Cascaded message inside parentheses'.					(aBuilder setting: #formatCommentWithStatements) label: 'Format comment with statements'.					(aBuilder setting: #indentString) label: 'Indent string'.					(aBuilder setting: #indentsForKeywords) label: 'Indents for keywords'.					(aBuilder setting: #keepBlockInMessage) label: 'Keep block in message'.					(aBuilder setting: #lineUpBlockBrackets) label: 'Line up block brackets'.					(aBuilder setting: #methodSignatureOnMultipleLines) label: 'Method signature on multiple lines'.					(aBuilder setting: #maxLineLength) label: 'Max line length'.					(aBuilder setting: #oneLineMessages) label: 'One line messages'.					(aBuilder setting: #multiLineMessages) label: 'Multi line messages'.					(aBuilder setting: #minimumNewLinesBetweenStatements) label: 'Minimum new lines between statements'.					(aBuilder setting: #newLineAfterCascade) label: 'New line after cascade'.					(aBuilder setting: #newLineBeforeFirstCascade) label: 'New line before first cascade'.					(aBuilder setting: #newLineBeforeFirstKeyword) label: 'New line before first keyword'.					(aBuilder setting: #newLinesAfterMethodComment) label: 'New lines after method comment'.					(aBuilder setting: #newLinesAfterMethodPattern) label: 'New lines after method pattern'.					(aBuilder setting: #newLinesAfterTemporaries) label: 'New lines after temporaries'.					(aBuilder setting: #numberOfArgumentsForMultiLine) label: 'Number of arguments for multi line'.					(aBuilder setting: #periodsAsTerminators) label: 'Periods as terminators'.					(aBuilder setting: #periodsAtEndOfBlock) label: 'Periods at end of block'.					(aBuilder setting: #periodsAtEndOfMethod) label: 'Periods at end of method'.					(aBuilder setting: #retainBlankLinesBetweenStatements) label: 'Retain blank lines between statements'.					(aBuilder setting: #retainBlankLinesBeforeComments) label: 'Retain blank lines before comments'.					(aBuilder setting: #stringFollowingReturn) label: 'String following return'.					(aBuilder setting: #stringInsideBlocks) label: 'String inside blocks'.					(aBuilder setting: #stringInsideParentheses) label: 'String inside parentheses'.					(aBuilder setting: #traditionalBinaryPrecedence) label: 'Traditional binary precedence'.					(aBuilder setting: #useTraditionalBinaryPrecedenceForParentheses)						label: 'Use traditional binary precedence for parentheses'.					(aBuilder setting: #formatOnDisplay) label: 'Format methods on display'.					(aBuilder setting: #formatOnAccept) label: 'Format methods on accept' ]! !"AST-Core"!"Nautilus"!"Rubric"!"Shout"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.797.mcz') load.ScriptLoader new update40617.!----End fileIn----!----QUIT----2015-06-30T16:02:24.097036+02:00 Pharo.image priorSource: 178103!----STARTUP----2015-06-30T16:02:24.277047+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-06-30T16:02:28.318556+02:00 Pharo.image priorSource: 201621!----STARTUP----2015-06-30T16:12:15.384368+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-06-30T16:12:15.466014+02:00 Pharo-40617.image priorSource: 201816!----STARTUP----2015-07-06T10:10:06.66953+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-06T10:10:06.762223+02:00 Pharo.image priorSource: 202011!----STARTUP----2015-07-06T10:10:06.947275+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-06T10:10:11.173128+02:00 Pharo.image priorSource: 202215!----STARTUP----2015-07-06T10:55:35.529342+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-07-06T10:55:35.68924+02:00 Pharo-40617.image priorSource: 202410!----STARTUP----2015-07-10T14:54:33.894643+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 7/10/2015 14:51' prior: 33732832!commentForCurrentUpdate ^ '15929 backport Pharo4: Revisiting RBUnpackagedCodeRule	https://pharo.fogbugz.com/f/cases/15929'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 7/10/2015 14:52'!script618	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.162.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 7/10/2015 14:52'!update40618	"self new update40618"	self withUpdateLog: '15929 backport Pharo4: Revisiting RBUnpackagedCodeRule	https://pharo.fogbugz.com/f/cases/15929'.	self loadTogether: self script618 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40617!ScriptLoader removeSelector: #script617!"ScriptLoader40"!!RBUnpackagedCodeRule methodsFor: 'running' stamp: 'YuriyTymchuk 7/8/2015 23:21' prior: 53274944!checkClass: aClass 	(self isUnpackaged: aClass) ifTrue: [		self result addClass: aClass ]! !!RBUnpackagedCodeRule methodsFor: 'running' stamp: 'YuriyTymchuk 7/8/2015 23:22' prior: 53274679!checkMethod: aMethod	(self isUnpackaged: aMethod) ifTrue: [		self result addMethod: aMethod ]! !!RBUnpackagedCodeRule methodsFor: 'running' stamp: 'YuriyTymchuk 7/8/2015 22:20'!isUnpackaged: anEntity	^ anEntity package isDefault! !"Refactoring-Critics"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.798.mcz') load.ScriptLoader new update40618.!----End fileIn----!----QUIT----2015-07-10T14:54:36.260693+02:00 Pharo.image priorSource: 202605!----STARTUP----2015-07-10T14:54:36.60957+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-10T14:54:40.758699+02:00 Pharo.image priorSource: 218468!----STARTUP----2015-07-10T15:04:42.067356+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-07-10T15:04:42.144693+02:00 Pharo-40618.image priorSource: 218662!----STARTUP----2015-07-31T10:06:18.832287+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-31T10:06:18.906559+02:00 Pharo.image priorSource: 218857!----STARTUP----2015-07-31T10:06:19.075251+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-31T10:06:22.858108+02:00 Pharo.image priorSource: 219062!----STARTUP----2015-07-31T10:26:48.632214+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-07-31T10:26:48.709608+02:00 Pharo-40618.image priorSource: 219257!----STARTUP----2015-08-26T17:19:17.276651+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 8/26/2015 17:16' prior: 33757333!commentForCurrentUpdate ^ '16362 Backport Pharo4: 16131 RBModifiesCollectionRule breaks methods AST when checking	https://pharo.fogbugz.com/f/cases/1636216069 backport Pharo4: 16067 remove #prepareDebuggerExample	https://pharo.fogbugz.com/f/cases/1606916081 Backport Pharo: 16080 RBImplementedButNotSent always true	https://pharo.fogbugz.com/f/cases/16081'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 8/26/2015 17:16'!script619	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 8/26/2015 17:16'!update40619	"self new update40619"	self withUpdateLog: '16362 Backport Pharo4: 16131 RBModifiesCollectionRule breaks methods AST when checking	https://pharo.fogbugz.com/f/cases/1636216069 backport Pharo4: 16067 remove #prepareDebuggerExample	https://pharo.fogbugz.com/f/cases/1606916081 Backport Pharo: 16080 RBImplementedButNotSent always true	https://pharo.fogbugz.com/f/cases/16081'.	self loadTogether: self script619 merge: false.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40618!ScriptLoader removeSelector: #script618!"ScriptLoader40"!!RBImplementedNotSentRule methodsFor: 'cache' stamp: 'MarcusDenker 8/25/2015 08:16' prior: 52474310!literals    "return all 'message sends' in the systed and cache them"    literals ifNil: [        literals := IdentitySet new.        Smalltalk specialSelectors do: [:sel |            sel isSymbol ifTrue: [ literals add: sel ] ].        result rootEnvironment methodsDo: [ :meth |            meth literals do: [ :lit | (meth hasLiteral: lit) ifTrue: [self addLiteral: lit]]]].            "here we do a second check as #literals returns all literals even the one storing             method name"    ^ literals! !!RBModifiesCollectionRule methodsFor: 'private' stamp: 'MarcusDenker 8/25/2015 08:29' prior: 52627713!modifiesTree: aCollectionTree in: aParseTree 	| notifier args |	notifier := RBParseTreeSearcher new.	args := Array with: (RBPatternVariableNode named: '`@object').	notifier 		matchesAnyTreeOf: (#(add: addAll: remove: removeAll:) collect: 					[:each | 					RBMessageNode 						receiver: aCollectionTree copy						selector: each						arguments: args])		do: [:aNode :answer | true].	^notifier executeTree: aParseTree initialAnswer: false! !PharoSyntaxTutorial removeSelector: #prepareDebuggerExample!PharoSyntaxTutorial removeSelector: #initialize!"ProfStef-Core"!"Refactoring-Critics"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.802.mcz') load.ScriptLoader new update40619.!----End fileIn----!----QUIT----2015-08-26T17:19:20.432137+02:00 Pharo.image priorSource: 219452!----STARTUP----2015-08-26T17:19:20.598586+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-08-26T17:19:24.761874+02:00 Pharo.image priorSource: 236604!----STARTUP----2015-08-26T17:59:14.8342+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-08-26T17:59:15.018924+02:00 Pharo-40619.image priorSource: 236799!----STARTUP----2015-08-28T15:17:16.060902+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 8/28/2015 15:15' prior: 33774181!commentForCurrentUpdate ^ '16388 Backport Pharo4: 16387 remove Cursor read showWhile: from ImageReadWriter>>#formFromStream:	https://pharo.fogbugz.com/f/cases/16388'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 8/28/2015 15:15'!script620	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 8/28/2015 15:15'!update40620	"self new update40620"	self withUpdateLog: '16388 Backport Pharo4: 16387 remove Cursor read showWhile: from ImageReadWriter>>#formFromStream:	https://pharo.fogbugz.com/f/cases/16388'.	self loadTogether: self script620 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40619!ScriptLoader removeSelector: #script619!"ScriptLoader40"!!ImageReadWriter class methodsFor: 'image reading/writing' stamp: 'MarcusDenker 8/28/2015 09:43' prior: 26775261!formFromStream: aBinaryStream 	"Answer a ColorForm stored on the given stream.  closes the stream"	| reader readerClass form |	readerClass := self withAllSubclasses 		detect: [ :subclass | subclass understandsImageFormat: aBinaryStream ]		ifNone: 			[ aBinaryStream close.			^ self error: 'image format not recognized' ].	reader := readerClass new on: aBinaryStream reset.	form := reader nextImage.	reader close.	^ form! !"Graphics-Files"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.803.mcz') load.ScriptLoader new update40620.!----End fileIn----!----QUIT----2015-08-28T15:17:17.767005+02:00 Pharo.image priorSource: 236992!----STARTUP----2015-08-28T15:17:17.93146+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-08-28T15:17:21.845199+02:00 Pharo.image priorSource: 252956!----STARTUP----2015-08-28T15:30:44.029635+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-08-28T15:30:44.119378+02:00 Pharo-40620.image priorSource: 253150!----STARTUP----2015-09-01T15:36:15.989708+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 9/1/2015 15:33' prior: 33791721!commentForCurrentUpdate ^ '15935 Backport 4.0: Renaming a package just by changing upper/lowercase removes the package	https://pharo.fogbugz.com/f/cases/15935'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 9/1/2015 15:33'!script621	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 9/1/2015 15:33'!update40621	"self new update40621"	self withUpdateLog: '15935 Backport 4.0: Renaming a package just by changing upper/lowercase removes the package	https://pharo.fogbugz.com/f/cases/15935'.	self loadTogether: self script621 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40620!ScriptLoader removeSelector: #script620!"ScriptLoader40"!!RPackageOrganizer methodsFor: 'accessing' stamp: 'NicolaiHess 7/8/2015 22:53' prior: 53738151!packageNamed: aSymbol  ifAbsent: errorBlock	^ packages 		at: aSymbol asSymbol 		ifAbsent: errorBlock		! !"RPackage-Core"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.804.mcz') load.ScriptLoader new update40621.!----End fileIn----!----QUIT----2015-09-01T15:36:17.836289+02:00 Pharo.image priorSource: 253345!----STARTUP----2015-09-01T15:36:18.050775+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-09-01T15:36:22.50955+02:00 Pharo.image priorSource: 268952!----STARTUP----2015-09-01T15:46:55.85832+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-09-01T15:46:55.944457+02:00 Pharo-40621.image priorSource: 269147!----STARTUP----2015-09-21T13:48:16.999597+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 9/21/2015 13:46' prior: 33808073!commentForCurrentUpdate ^ '10235 StandardFileStream>>compressFile cant create new compressed file	https://pharo.fogbugz.com/f/cases/10235'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 9/21/2015 13:46'!script622	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 9/21/2015 13:46'!update40622	"self new update40622"	self withUpdateLog: '10235 StandardFileStream>>compressFile cant create new compressed file	https://pharo.fogbugz.com/f/cases/10235'.	self loadTogether: self script622 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40621!ScriptLoader removeSelector: #script621!"ScriptLoader40"!!StandardFileStream methodsFor: '*compression' stamp: 'CarloTeixeira 9/12/2015 23:47' prior: 57331934!compressFile	"Write a new file that has the data in me compressed in GZip format."	| zipStream rawWriteStream |	self		readOnly;		binary.	rawWriteStream := (self name asFileReference, 'gz') writeStream		binary;		setFileTypeToObject.	zipStream := GZipWriteStream on: rawWriteStream.	[ 	| buffer |	buffer := ByteArray new: 50000.	[ self atEnd ] whileFalse: [ zipStream nextPutAll: (self nextInto: buffer) ] ]		ensure: [ 			zipStream close.			self close ].	^ zipStream! !"Compression"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.805.mcz') load.ScriptLoader new update40622.!----End fileIn----!----QUIT----2015-09-21T13:48:19.000693+02:00 Pharo.image priorSource: 269340!----STARTUP----2015-09-21T13:48:19.175441+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-09-21T13:48:23.252075+02:00 Pharo.image priorSource: 285288!----STARTUP----2015-09-21T14:00:30.612233+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-09-21T14:00:30.694533+02:00 Pharo-40622.image priorSource: 285483!----STARTUP----2015-10-18T00:20:52.37862+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 10/18/2015 00:17' prior: 33824069!commentForCurrentUpdate ^ '16736 Fix Nautilus #openOnClass: for Pharo4	https://pharo.fogbugz.com/f/cases/1673616777 Querying block with many temps fails	https://pharo.fogbugz.com/f/cases/16777'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 10/18/2015 00:17'!script623	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.645.mczOpalCompiler-Tests-TheIntegrator.285.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 10/18/2015 00:17'!update40623	"self new update40623"	self withUpdateLog: '16736 Fix Nautilus #openOnClass: for Pharo4	https://pharo.fogbugz.com/f/cases/1673616777 Querying block with many temps fails	https://pharo.fogbugz.com/f/cases/16777'.	self loadTogether: self script623 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40622!ScriptLoader removeSelector: #script622!"ScriptLoader40"!!OCClosureTests methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 11:27'!testBlockTemps		| block block1 block2 |	"Regression test: Bytecode offset of IR was to last byte of IR node, which for blocks include temp initialization bytes. This caused scan for block creation bytecode to fail when there were many block temps, and no source node to be found."	block := [ :arg | | a b c d e f g | a:=b:=c:=d:=e:=f:=g := arg. [ a ] ].	self assert: block sourceNode isBlock.	self assert: block argumentNames equals: (OrderedCollection with:#arg).	block1 := block value: 1.	block2 := block value: 2.	self assert: block1 value = 1.	self assert: block2 value = 2! !!IRPushClosureCopy methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 15:11'!isGoto	^ 	false! !!IRPushClosureCopy methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 15:11'!isJump	^ 	false! !!IRBuilder methodsFor: 'private' stamp: 'HenrikSperreJohansen 10/13/2015 15:09' prior: 26498935!startNewSequence	"End current instruction sequence and start a new sequence to add instructions to.  If ending block just falls through to new block then add an explicit jump to it so they stay linked"	| newSequence | 	currentSequence ifEmpty: [^ self].	"block is still empty, continue using it"	newSequence := IRSequence orderNumber: currentSequence orderNumber + 1.	newSequence method: ir.	currentSequence last transitionsToNextSequence		ifFalse: [ self add: (IRJump new destination: newSequence)].	self currentScope isPushClosureCopy ifTrue: [self currentScope lastBlockSequence: currentSequence].	currentSequence := newSequence.! !!IRInstruction methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 15:08'!transitionsToNextSequence	"Does the current instruction intrinsically know how to transition to the next sequence?"	^ self isJump or: [self isReturn or: [self isPushClosureCopy ]]! !!IRMethod methodsFor: 'debugging' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26591128!instructionForPC: aPC"generates the compiledMethod and optimize the ir. 	Removes the side-effect of optimizing the IR while looking for instruction, 	which results in incorrect found instruction"	self compiledMethod.	"For a given PC, the actual instruction may start N bytes ahead, specifically startPC of blocks is *after* the bytecode that creates the block. N = 3 must be revisited when bytecode sets are extended"	0 to: 3 do: [ :off |		(self firstInstructionMatching: [:ir | ir bytecodeOffset = (aPC - off) ]) ifNotNil: [:it |^it]]	! !!MustBeBooleanTests methodsFor: 'tests' stamp: 'HenrikSperreJohansen 10/13/2015 15:40'!testIfTrueWithClosureAfterJump	"A closure is a multibyte instruction, that should not be	1) confused for an ending jump in ifTrue/ifFalse structure	2) set as jumptarget, or have PC manually set to, none but its first byte."	| myBooleanObject |	myBooleanObject := MyBooleanObject new.	myBooleanObject		ifTrue: [ 4 + 3 ].	[ :string | 	self assert: 'a ' , string equals: 'a 5' ] value: '5'! !!IRBytecodeGenerator methodsFor: 'mapping' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26557903!mapBytesTo: instr	"Record the current byte offset in instruction sequence as start of instr. 	This is later used to calculate the total byte offset of instruction in generated code,	see #bytecodes"	instrMap add: instr -> (bytes size + 1)! !!NautilusUI methodsFor: 'package filter' stamp: 'MarcusDeneker 10/18/2015 00:10'!useLastPackagePatternStringForClass: aClass    ^ self ! !!IRJumpIf methodsFor: 'acessing' stamp: 'HenrikSperreJohansen 10/13/2015 15:37' prior: 26583734!nextBytecodeOffsetAfterJump	"check if we are in ifTrue:ifFalse: / ifFalse:ifTrue: or in ifTrue: / ifFalse: and answers the next byte code offset"	^destination last isJump 		ifTrue: [ destination last destination first bytecodeOffset ]		ifFalse: [ 			(destination sequence at: ((destination size - 1) max: 1)) bytecodeOffset ]! !!IRTranslatorV2 methodsFor: 'visiting' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26658704!visitInstruction: instr	gen mapBytesTo: instr.	self visitNode: instr.! !!IRTranslatorV2 methodsFor: 'visiting' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26655377!visitPushClosureCopy: closure	closure copiedValues do: [:name | 			gen pushTemp: (self currentScope indexForVarNamed: name).	].	gen mapBytesTo: closure.	gen pushClosureCopyNumCopiedValues: closure copiedValues size 			numArgs: closure arguments size 			to: closure destination orderNumber.	self pushScope: closure.	gen pushNClosureTemps: closure definedTemps size! !IRInstruction removeSelector: #isJumpOrReturn!"Nautilus"!"OpalCompiler-Core"!"OpalCompiler-Tests"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.806.mcz') load.ScriptLoader new update40623.!----End fileIn----!----QUIT----2015-10-18T00:20:57.091294+02:00 Pharo.image priorSource: 285678!----STARTUP----2015-10-18T00:20:57.287183+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-10-18T00:21:02.531129+02:00 Pharo.image priorSource: 305874!----STARTUP----2015-10-18T00:31:30.417885+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-10-18T00:31:30.58539+02:00 Pharo-40623.image priorSource: 306069!----STARTUP----2015-10-26T12:45:27.296246+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 10/26/2015 12:43' prior: 33840407!commentForCurrentUpdate ^ '16813 Unclosed file streams	https://pharo.fogbugz.com/f/cases/16813'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 10/26/2015 12:43'!script624	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.645.mczOpalCompiler-Tests-TheIntegrator.285.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-TheIntegrator.31.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 10/26/2015 12:43'!update40624	"self new update40624"	self withUpdateLog: '16813 Unclosed file streams	https://pharo.fogbugz.com/f/cases/16813'.	self loadTogether: self script624 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40623!ScriptLoader removeSelector: #script623!"ScriptLoader40"!!RGMethodDefinition methodsFor: '*Ring-Monticello' stamp: 'HenrikSperreJohansen 10/19/2015 14:26' prior: 53462522!basicAsMCMethodDefinition   "Creates a MCMethodDefinition from the receiver"   self isActive ifTrue: [ 		self compiledMethod sourceFileStream ifNotNil: [ :file|			[^ self asMCMethodDefinitionFromFile: file] ensure: [file close]]].	   ^ MCMethodDefinition		className: self theNonMetaParentName 	   	classIsMeta: self isMetaSide		selector: self selector		category: self protocol		timeStamp: self stamp		source: self sourceCode ! !"Ring-Monticello"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.807.mcz') load.ScriptLoader new update40624.!----End fileIn----!----QUIT----2015-10-26T12:45:29.012453+01:00 Pharo.image priorSource: 306264!----STARTUP----2015-10-26T12:45:29.208516+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-10-26T12:45:33.670786+01:00 Pharo.image priorSource: 322100!----STARTUP----2015-10-26T12:59:16.201816+01:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-10-26T12:59:16.283083+01:00 Pharo-40624.image priorSource: 322295!----STARTUP----2015-11-11T20:43:20.423212+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 11/11/2015 16:39' prior: 33860993!commentForCurrentUpdate ^ '16908 wrong source node for pc in mustBeBooleanInMagic	https://pharo.fogbugz.com/f/cases/16908'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 11/11/2015 16:40'!script625	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.647.mczOpalCompiler-Tests-TheIntegrator.287.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-TheIntegrator.31.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 11/11/2015 16:40'!update40625	"self new update40625"	self withUpdateLog: '16908 wrong source node for pc in mustBeBooleanInMagic	https://pharo.fogbugz.com/f/cases/16908'.	self loadTogether: self script625 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40624!ScriptLoader removeSelector: #script624!"ScriptLoader40"!!MustBeBooleanTests methodsFor: 'tests' stamp: 'HenrikSperreJohansen 11/6/2015 11:10'!testDNU	| code |	code := [ (true ifFalse:[]) ifTrue:[] ].	self should: code raise: MessageNotUnderstood .	code on: MessageNotUnderstood do: [ :error | self assert: error receiver isNil. 			self assert: error message selector equals: #ifTrue:]! !!IRBytecodeGenerator methodsFor: 'results' stamp: 'HenrikSperreJohansen 11/6/2015 10:56' prior: 26546286!bytecodes	| stream |	self updateJumpOffsets.	stream := (ByteArray new: 100) writeStream.  	orderSeq do: [ :seqId | |lastInstr|			"If the instruction will emit bytes, record the first byte emitted as the instructions bytecode index"			lastInstr := IRInstruction new -> 1.			(instrMaps at: seqId) do: [ :assoc | |nextInstr|				nextInstr := assoc.				lastInstr key bytecodeIndex: ((nextInstr value - lastInstr value) > 0 ifTrue: [ 					stream position + lastInstr value]).				lastInstr := assoc.				  ].			lastInstr key bytecodeIndex: ((seqBytes at: seqId) size < lastInstr value ifFalse: [  stream position + lastInstr value]).			stream nextPutAll: (seqBytes at: seqId) ].	^ stream contents! !!Object methodsFor: '*OpalCompiler-Core' stamp: 'HenrikSperreJohansen 11/6/2015 11:18' prior: 33518946!mustBeBooleanInMagic: context	"Permits to redefine methods inlined by compiler.	Take the ast node corresponding to the mustBeBoolean error, compile it on the with Opal fly and executes it as a DoIt. Then resume the execution of the context."	| sendNode methodNode method |	"get the message send node that triggered mustBeBoolean"	sendNode := context sourceNode sourceNodeForPC: context pc - 1.	"Build node to perform send unoptimized"	methodNode := RBMethodNode 		selector: #ExecuteUnOptimizedIn: 		arguments: { RBVariableNode named:'ThisContext' } 		body: sendNode copy asSequenceNode.	"Rewrite temps to access the values in context"	methodNode rewriteTempsForContext: context.	"Rewrite non-local returns to return to the correct context from send"	RBParseTreeRewriter new 		replace: '^ ``@value' with: 'ThisContext home return: ``@value';		executeTree: methodNode.	"Add a return to the method body"	methodNode body transformLastToReturn.		"Keep same compilation context as the sender node's"	methodNode compilationContext: sendNode methodNode compilationContext copy.	"Disable inlining so the message send will be unoptimized"	methodNode compilationContext compilerOptions: #(- optionInlineIf optionInlineAndOr optionInlineWhile).	"Generate the method"		method := methodNode generate.	"resume the context at the instruction following the send when returning from deoptimized code"	context pc: sendNode irInstruction nextBytecodeOffsetAfterJump.	"Execute the generated method"	^ context receiver withArgs: {context} executeMethod: method! !"OpalCompiler-Core"!"OpalCompiler-Tests"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.808.mcz') load.ScriptLoader new update40625.!----End fileIn----!----QUIT----2015-11-11T20:43:23.195059+01:00 Pharo.image priorSource: 322490!----STARTUP----2015-11-11T20:43:23.372928+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-11-11T20:43:27.49757+01:00 Pharo.image priorSource: 340677!----STARTUP----2015-11-11T20:54:29.975887+01:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-11-11T20:54:30.056243+01:00 Pharo-40625.image priorSource: 340872!----STARTUP----2015-12-05T10:51:42.614439+00:00 as /home/raziel/MyProjects/pharo/Pharo.image!!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!bar
<foo: 4><foo: 2><foo: 1><foo: 5><foo: 3>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!bar
<foo: 2><foo: 4><foo: 3><foo: 5><foo: 1>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!bar
<foo: 5><foo: 2><foo: 1><foo: 3><foo: 4>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!bar
<foo: 5><foo: 1><foo: 4><foo: 2><foo: 3>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!bar
<foo: 3><foo: 1><foo: 2><foo: 4><foo: 5>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!bar
<foo: 5><foo: 1><foo: 4><foo: 3><foo: 2>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!zork
<foo: #()>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33896548!zork
<foo: #( foo )>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33896661!zork
<foo: #( foo: )>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33896779!zork
<foo: #( 12 )>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33896898!zork
<foo: #( true )>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!zork
< = 1>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897118!zork
< , 3>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897227!zork
< > 4>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897336!zork
< < 5>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897445!zork
< == 1>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897554!zork
< <> 3>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897664!zork
< >< 4>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897774!zork
< ** 5>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!zork
<foo: $a>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33897978!zork
<foo: $ >! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!zork
<foo>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36'!zork
<foo: 1>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'Anonymous 12/5/2015 19:36' prior: 33898278!zork
<foo: 1 bar: 2>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork
<foo: 123>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33898494!zork
<foo: -123>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33898610!zork
<foo: 12.3>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33898727!zork
<foo: -12.3>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork
<foo: ''>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33898946!zork
<foo: 'bar'>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork
<foo: #bar>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33899163!zork
<foo: #bar:>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33899280!zork
<foo: #bar:zork:>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork
| temps | <foo>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33899505!zork
<foo> | temps |! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork
<foo: true>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33899731!zork
<foo: false>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33899848!zork
<foo: nil>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar
<foo>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar
<foo>! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo
! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!inst
<primitive: 74> ^ #inst! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!idHash
<primitive: 75> ^ #idHash! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!lookup
<primitive: 'primitiveDirectoryLookup' module: 'FilePlugin'> ^ #lookup! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!delim
<primitive: 'primitiveDirectoryDelimitor' module: 'FilePlugin'> ^ #delim! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!lookup
<primitive: 'primitiveDirectoryLookup' error: errorCode module: 'FilePlugin'> ^ errorCode! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!lookup
<primitive: 'primitiveDirectoryLookup' module: 'FilePlugin' error: errorCode> ^ errorCode! !!MethodPragmaTest methodsFor: 'generated' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar
<foo>! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28527203!a ^ 'a1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28527295!b ^ 'b1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28527020!c ^ 'c1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33901965!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33902079!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: '' prior: 33902193!c	^ 'c1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28527387!one ^ 2! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28526706!two ^ 3! !"MonticelloMocks"!"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33902617!one	^ 1! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 33902710!two	^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33902319!a ^ 'a1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33902502!c ^ 'c1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33903075!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: '' prior: 33903189!c	^ 'c1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33902426!b ^ 'b1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28527112!d ^ 'd1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33903506!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 33903620!d	^ 'd'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33903315!a ^ 'a1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33903746!b ^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33903967!a ^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33904081!b ^ 'b2'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33903391!c ^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33903853!d ^ 'd1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33904175!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33904269!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: '' prior: 33904383!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 33904477!d	^ 'd'! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33904583!a ^ 'a'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33904690!b ^ 'b'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33905080!b	^ 'b1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33904967!a ^ 'a1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33905320!a ^ 'a'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33905205!b ^ 'b'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33905434!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33905547!b	^ 'b1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33905652!a ^ 'a1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33905874!a	^ 'a2'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33906000!a ^ 'a1'! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 33906115!a	^ 'a2'! !"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33902855!one ^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33906556!one	^ 1! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33906681!one ^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33906795!one	^ 1! !"MonticelloMocks"!"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33906920!one ^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33902961!two ^ 3! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33907054!one	^ 1! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 33907167!two	^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 28527478!truth ^ false! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33907292!one ^ 2! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33907631!one ^ 7! !!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33907398!two ^ 3! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33907724!one	^ 1! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 33907512!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 33907817!two	^ 2! !"MonticelloMocks"!"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33907922!one ^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33908139!two ^ 3! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33908273!one	^ 1! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 33908386!two	^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33908511!one ^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33908751!one	^ 1! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33908637!two ^ 3! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33908876!one ^ 2! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33909103!one	^ 1! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 33908990!two	^ 2! !"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'abc 12/5/2015 19:36' prior: 33909208!one ^ 2! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 33909428!one	^ 1! !"MonticelloMocks"!!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^42! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^42! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^42! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^42! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^42! !!TestClassOther methodsFor: '*Test1-TAG1' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^42! !!Trait method!one	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!classOne	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!two	^ 2! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!two	^ 2! !!Trait method!one	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!two	^ 2! !!Trait method!one	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!two	^ 2! !!Trait method!two	^ 2! !!Trait method!classOne	^ 1! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!addr	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!addr: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!long	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!long: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!short	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!short: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!float	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!float: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!int64	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!int64: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64 put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!double	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!double: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!byte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:36'!byte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte put: anObject! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33915388!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork1: myArgument zork2: mySecondArgument ^true! !!Trait method!zork1: myArgument zork2: mySecondArgument ^true! !!Trait method!zork1: myArgument zork2: mySecondArgument ^true! !!Trait method!zork1: myArgument zork2: mySecondArgument ^true! !!Trait method!zork1: myArgument zork2: mySecondArgument ^true! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork1: myArgument zork2: somethingElse ^false! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33917440!zork1: myArgument zork2: mySecondArgument ^true! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33917832!zork1: somethingElse zork2: myArgument ^false! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: somethingElse zork2: myArgument ^false! !!Trait method!zork1: somethingElse zork2: myArgument ^false! !!Trait method!zork1: somethingElse zork2: myArgument ^false! !!Trait method!zork1: somethingElse zork2: myArgument ^false! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33920051!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self blah! !!T1 methodsFor: 'catA' stamp: 'MarcinKopacz 12/5/2015 19:36'!mA! !!Trait method!mA! !!Trait method!mA! !!Trait method!mA! !!Trait method!mA! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33922974!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self blah! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!m12 ^false! !!Trait method!m12	self traitConflict ! !!Trait method!m12	self traitConflict ! !!Trait method!m12	self traitConflict ! !!Trait method!m12	self traitConflict ! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!@ myArgument ^true! !!Trait method!@ myArgument ^true! !!Trait method!@ myArgument ^true! !!Trait method!@ myArgument ^true! !!Trait method!@ myArgument ^true! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!@myArgument ^false! !!Trait method!@ anObject	self traitConflict! !!Trait method!@ anObject	self traitConflict! !!Trait method!@ anObject	self traitConflict! !!Trait method!@ anObject	self traitConflict! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork: myArgument		^true! !!Trait method!zork: myArgument		^true! !!Trait method!zork: myArgument		^true! !!Trait method!zork: myArgument		^true! !!Trait method!zork: myArgument		^true! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork: myArgument ^false! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33925831!zork:myArgument ^true! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33926108!zork:myArgument ^false! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!Trait method!zork: arg1 	self traitConflict! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork1: t1 zork2: t2 ^true! !!Trait method!zork1: t1 zork2: t2 ^true! !!Trait method!zork1: t1 zork2: t2 ^true! !!Trait method!zork1: t1 zork2: t2 ^true! !!Trait method!zork1: t1 zork2: t2 ^true! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!zork1: anObject zork2: anotherObject ^false! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!zork1: arg1 zork2: arg2 	self traitConflict ! !!Trait method!m12 ^false! !!Trait method!@myArgument ^false! !!Trait method!zork1: anObject zork2: anotherObject ^false! !!Trait method!zork:myArgument ^false! !!Trait method!m12 ^false! !!Trait method!@myArgument ^false! !!Trait method!zork1: anObject zork2: anotherObject ^false! !!Trait method!zork:myArgument ^false! !!Trait method!m12 ^false! !!Trait method!@myArgument ^false! !!Trait method!zork1: anObject zork2: anotherObject ^false! !!Trait method!zork:myArgument ^false! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33929001!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self blah! !!T2 methodsFor: 'catY' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11! !!Trait method!m11	self traitConflict ! !!Trait method!m11	self traitConflict ! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11	self traitConflict ! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!Trait method!m11! !!Trait method!m11! !!Trait method!m11! !!Trait method!m11! !!Trait method!m11! !!Trait method!m11! !!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11! !!Trait method!m11	self traitConflict ! !!Trait method!m11	self traitConflict ! !!Trait method!m11	self traitConflict ! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11	self traitConflict ! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!Trait method!m11! !!Trait method!m11! !!Trait method!m11! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:36'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:36'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:36' prior: 33932733!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:36'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:36'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:36'!bar ^self blah! !Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted1!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted2!Smalltalk globals removeClassNamed: #TestWithAccessors!Smalltalk globals removeClassNamed: #TestWithAccessors!Smalltalk globals removeClassNamed: #TestWithAccessors!Smalltalk globals removeClassNamed: #JunkClass!Smalltalk globals removeClassNamed: #JunkClass!Smalltalk globals removeClassNamed: #JunkClass!Smalltalk globals removeClassNamed: #JunkClass!!NewClass methodsFor: 'category' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^nil! !!NewClass methodsFor: '*zzzzz' stamp: 'MarcinKopacz 12/5/2015 19:37'!method2 ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!method3 ^nil! !!NewClass methodsFor: 'category' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^nil! !!NewClass methodsFor: '*zzzzz' stamp: 'MarcinKopacz 12/5/2015 19:37'!method2 ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!method3 ^nil! !!NewClass class methodsFor: 'category' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^nil! !!NewClass class methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!method2 ^nil! !!NewClass class methodsFor: '*zzzzz' stamp: 'MarcinKopacz 12/5/2015 19:37'!method3 ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!RPackageOldStubClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!RPackageOldStubClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!RPackageOldStubClass class methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!RPackageOldStubClass class methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!RPackageOldStubClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: 'xxxxx' stamp: 'MarcinKopacz 12/5/2015 19:37'!newMethod ^nil! !!NewClass methodsFor: 'xxxxx' stamp: 'MarcinKopacz 12/5/2015 19:37'!newMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod2 ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod2 ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:37'!stubMethod ^nil! !Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33938007!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33938366!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33939791!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33940107!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33940290!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33940851!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33940986!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33941330!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33941684!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33942009!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33942380!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33943139!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline11: spec	<version: '1.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: 'this is my comment'.		spec repository: 'http://www.squeaksource.com/Versionner'.		spec package: 'Collections-Streams'. ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33948426!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33948785!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33950210!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33950526!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33950709!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33951270!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33951405!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33951749!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33952103!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33952428!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33952799!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33953558!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33958496!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33958855!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33960280!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33960596!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33960779!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33961340!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33961475!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33961819!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33962173!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33962498!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33962869!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33963628!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33968566!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33968925!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33970350!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33970666!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33970849!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33971410!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33971545!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33971889!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33972243!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33972568!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33972939!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33973698!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33978636!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33978995!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33980420!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33980736!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33980919!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33981480!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33981615!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33981959!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33982313!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33982638!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33983009!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33983768!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!!TUTU methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!foo ^ 10! !Smalltalk globals removeClassNamed: #TUTU!!TUTU methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!foo ^ 10! !Smalltalk globals removeClassNamed: #TUTU!!TUTU methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!foo ^ 10! !Smalltalk globals removeClassNamed: #TUTU!!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33989127!ruletestV0FalsePositive^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.666429+00:00') #(#(#RGClassDefinition #(#MFClassB)) #'2015-12-05T19:37:03.667589+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33989280!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33989926!ruletestV0TODO^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.718905+00:00') #(#(#RGClassDefinition #(#MFClassB)) #'2015-12-05T19:37:03.719068+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!rejectClasses^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.761313+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33990554!rejectClasses^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33991106!ruletestV0FalsePositive^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.807194+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33991259!ruletestV0FalsePositive^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.807194+00:00') #(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:03.810317+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33991486!ruletestV0FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:03.810317+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33991803!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!rejectRules^ #(0)! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33992391!rejectRules^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33992866!ruletestV0TODO^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.902577+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33993010!ruletestV0TODO^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:03.902577+00:00') #(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:03.904779+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33993228!ruletestV0TODO^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:03.904779+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33993536!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!MFClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!foo! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33994196!ruletestV0FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassA #foo #false)) #'2015-12-05T19:37:03.988261+00:00') )! !MFClassA removeSelector: #foo!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33994349!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!MFClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!foo! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33995056!ruletestV0TODO^ #(#(#(#RGMethodDefinition #(#MFClassA #foo #false)) #'2015-12-05T19:37:04.039124+00:00') )! !MFClassA removeSelector: #foo!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33995200!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33995799!ruletestV0FalsePositive^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.090056+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33996371!ruletestV0TODO^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.137217+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33997341!ruletestV0FalsePositive^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.262832+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33997913!ruletestV0TODO^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.307882+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!rejectClasses^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.470991+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33999356!rejectClasses^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!rejectRules^ #('test')! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33999700!rejectRules^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 33999972!ruletestV0FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:04.483073+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34000560!ruletestV0FalsePositive^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.524644+00:00') #(#(#RGClassDefinition #(#MFClassB)) #'2015-12-05T19:37:04.524887+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34000713!ruletestV0FalsePositive^ #()! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruletestV0TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34001359!ruletestV0TODO^ #(#(#(#RGClassDefinition #(#MFClassA)) #'2015-12-05T19:37:04.571253+00:00') #(#(#RGClassDefinition #(#MFClassB)) #'2015-12-05T19:37:04.571453+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34001503!ruletestV0TODO^ #()! !!ClassForTestToBeDeleted3 methodsFor: ''!fuelAfterMaterialization a := #A! !!TUTU methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!foo! !Smalltalk globals removeClassNamed: #Point1!!TUTU class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!dummyMeth! !(Smalltalk globals at: #TUTU) rename: #RenamedTUTU!Smalltalk globals removeClassNamed: #SubclassExample!Smalltalk globals removeClassNamed: #SubclassExample!!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!a ^self! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!a ^a! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!c ^c! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!a ^a! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!b ^b! !!MySuperclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^self subclassResponsibility! !!MySuperclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method2 ^123! !!MySubclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^ 3! !!MySubclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method3 ^5! !Smalltalk globals removeClassNamed: #MySubclass!Smalltalk globals removeClassNamed: #MySuperclass!!MySuperclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^self subclassResponsibility! !!MySuperclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method2 ^123! !!MySubclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method1 ^ 3! !!MySubclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!method3 ^5! !Smalltalk globals removeClassNamed: #MySubclass!Smalltalk globals removeClassNamed: #MySuperclass!!Behavior method!thisIsATest ^2! !!ClassForTestToBeDeleted4 methodsFor: ''!fuelAfterMaterialization a := #A! !Object subclass: #'ConfigurationOfA'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfA'!!ConfigurationOfA methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfA methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34004204!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34004546!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfA class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfA class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34005920!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfA class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34006219!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfA class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34006385!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfA class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34006929!project	^self new project! !!ConfigurationOfA class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34007047!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfA class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34007374!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfA class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34007711!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfA class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34008019!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfA class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34008373!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfA class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34009115!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:37'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34012837!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34013097!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34013298!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34013574!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34013775!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34014051!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34014252!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34014528!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ClassForTestToBeDeleted5 methodsFor: ''!fuelAfterMaterialization a := #A! !Smalltalk globals removeClassNamed: #MCMockClassB!MCSnapshotTest removeSelector: #mockClassExtension!MCMockClassA removeSelector: #two!MCMockClassA removeSelector: #truth!MCMockClassA removeSelector: #q!MCMockClassA removeSelector: #one!MCMockClassA removeSelector: #moreTruth!MCMockClassA removeSelector: #falsehood!MCMockClassA removeSelector: #d!MCMockClassA removeSelector: #c!MCMockClassA removeSelector: #b!MCMockClassA removeSelector: #a!MCMockClassA class removeSelector: #touchCVar!MCMockClassA class removeSelector: #one!MCMockClassA class removeSelector: #initialize!MCMockClassA class removeSelector: #initializationOrder!MCMockClassA class removeSelector: #cVar!MCMockASubclass removeSelector: #variables2!MCMockASubclass removeSelector: #variables!MCMockASubclass class removeSelector: #initialize!Smalltalk globals removeClassNamed: #MCMockASubclass!Smalltalk globals removeClassNamed: #MCMockClassA!Smalltalk globals removeClassNamed: #MCMockClassI!Smalltalk globals removeClassNamed: #MCMockClassH!Smalltalk globals removeClassNamed: #MCMockClassG!Smalltalk globals removeClassNamed: #MCMockClassF!MCMockClassE class removeSelector: #two!Smalltalk globals removeClassNamed: #MCMockClassE!MCMockClassD removeSelector: #one!Smalltalk globals removeClassNamed: #MCMockClassD!!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 0!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!!MCMockClassB commentStamp: '' prior: 0!This comment has a bang!! Bang!! Bang!!!!MCMockClassD methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:21'!one	^ 1! !!MCMockClassE class methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:22'!two	^ 2! !!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 34016596!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!!MCMockASubclass class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:23'!initialize	InitializationOrder := InitializationOrder		ifNil: [ -100 ] "let the test fail"		ifNotNil: [ InitializationOrder + 1.]! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!variables	^ x + Y + MCMockClassA! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!variables2	^ ivar + CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'cwp 8/10/2003 02:31'!cVar	^ CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: '10/14/2010 15:41'!initializationOrder	^ InitializationOrder! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:21'!initialize	CVar := #initialized.	InitializationOrder := 1.! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!one	^ 1! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'stephaneducasse 2/4/2006 20:47'!touchCVar	CVar := #touched! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29'!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29'!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric'!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31'!d	^ 'd'! !!MCMockClassA methodsFor: 'boolean' stamp: 'cwp 7/13/2003 02:49'!falsehood	^ false! !!MCMockClassA methodsFor: 'boolean' stamp: 'ab 7/7/2003 23:21'!moreTruth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22'!one	^ 1! !!MCMockClassA methodsFor: 'drag''n''drop' stamp: 'avi 9/23/2003 17:14'!q! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31'!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28'!two	^ 2! !!MCSnapshotTest methodsFor: '*MonticelloMocks' stamp: 'cyrilledelaunay 1/21/2011 12:10'!mockClassExtension	"I change the protocol of this method to resolve the failing test: MCChangeNotificationTest >> testExtMethodModified. This test basically test that when we modified an extension method, the extended package is marked as 'modified'. The problem is that Monticello treat differently a classic method from an extension method, and this only by checking if the protocol name start with a star. Therefore, if the protocol does not match the extending package name, the extending package name will never be notified, and the test will fail. " ! !!MCMockClassB commentStamp: '' prior: 34016749!This comment has a bang!! Bang!! Bang!!!Smalltalk globals removeClassNamed: #MCMockClassB!MCSnapshotTest removeSelector: #mockClassExtension!MCMockClassA removeSelector: #two!MCMockClassA removeSelector: #truth!MCMockClassA removeSelector: #q!MCMockClassA removeSelector: #one!MCMockClassA removeSelector: #moreTruth!MCMockClassA removeSelector: #falsehood!MCMockClassA removeSelector: #d!MCMockClassA removeSelector: #c!MCMockClassA removeSelector: #b!MCMockClassA removeSelector: #a!MCMockClassA class removeSelector: #touchCVar!MCMockClassA class removeSelector: #one!MCMockClassA class removeSelector: #initialize!MCMockClassA class removeSelector: #initializationOrder!MCMockClassA class removeSelector: #cVar!MCMockASubclass removeSelector: #variables2!MCMockASubclass removeSelector: #variables!MCMockASubclass class removeSelector: #initialize!Smalltalk globals removeClassNamed: #MCMockASubclass!Smalltalk globals removeClassNamed: #MCMockClassA!Smalltalk globals removeClassNamed: #MCMockClassI!Smalltalk globals removeClassNamed: #MCMockClassH!Smalltalk globals removeClassNamed: #MCMockClassG!Smalltalk globals removeClassNamed: #MCMockClassF!MCMockClassE class removeSelector: #two!Smalltalk globals removeClassNamed: #MCMockClassE!MCMockClassD removeSelector: #one!Smalltalk globals removeClassNamed: #MCMockClassD!!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 0!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!!MCMockClassB commentStamp: '' prior: 0!This comment has a bang!! Bang!! Bang!!!!MCMockClassD methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:21'!one	^ 1! !!MCMockClassE class methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:22'!two	^ 2! !!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 34021220!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!!MCMockASubclass class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:23'!initialize	InitializationOrder := InitializationOrder		ifNil: [ -100 ] "let the test fail"		ifNotNil: [ InitializationOrder + 1.]! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!variables	^ x + Y + MCMockClassA! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!variables2	^ ivar + CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'cwp 8/10/2003 02:31'!cVar	^ CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: '10/14/2010 15:41'!initializationOrder	^ InitializationOrder! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:21'!initialize	CVar := #initialized.	InitializationOrder := 1.! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!one	^ 1! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'stephaneducasse 2/4/2006 20:47'!touchCVar	CVar := #touched! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29'!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29'!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric'!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31'!d	^ 'd'! !!MCMockClassA methodsFor: 'boolean' stamp: 'cwp 7/13/2003 02:49'!falsehood	^ false! !!MCMockClassA methodsFor: 'boolean' stamp: 'ab 7/7/2003 23:21'!moreTruth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22'!one	^ 1! !!MCMockClassA methodsFor: 'drag''n''drop' stamp: 'avi 9/23/2003 17:14'!q! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31'!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28'!two	^ 2! !!MCSnapshotTest methodsFor: '*MonticelloMocks' stamp: 'cyrilledelaunay 1/21/2011 12:10'!mockClassExtension	"I change the protocol of this method to resolve the failing test: MCChangeNotificationTest >> testExtMethodModified. This test basically test that when we modified an extension method, the extended package is marked as 'modified'. The problem is that Monticello treat differently a classic method from an extension method, and this only by checking if the protocol name start with a star. Therefore, if the protocol does not match the extending package name, the extending package name will never be notified, and the test will fail. " ! !!MCMockClassB commentStamp: '' prior: 34021373!This comment has a bang!! Bang!! Bang!!!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable11MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!!MBFooTestA methodsFor: 'mod' stamp: 'MarcinKopacz 12/5/2015 19:37'!bar ^self! !MBFooTestA removeSelector: #foo!MBFooTestA removeSelector: #bar!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!"MBFooTests"!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBFooTests"!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!!ConfigurationOfMBFooTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBFooTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !!ConfigurationOfMBFooTests methodsFor: 'cat'!version12MBFooTest: spec	"self reset"	<version: '1.2' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.3'].! !"ConfigurationOfMBFooTests"!!MBFooTestA methodsFor: '*MBFooTests-dkh.3'!foo ^self! !"MBFooTests"!!ConfigurationOfMBFooTests methodsFor: 'mod' stamp: 'MarcinKopacz 12/5/2015 19:37'!bar ^self! !MBFooTestA removeSelector: #foo!Smalltalk globals removeClassNamed: #MBFooTestA!ConfigurationOfMBFooTests removeSelector: #version12MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version11MBFooTest:!ConfigurationOfMBFooTests removeSelector: #version10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionStable10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #symbolicVersionDevelopmentNotDefinedMBFooTest:!ConfigurationOfMBFooTests removeSelector: #project!ConfigurationOfMBFooTests removeSelector: #baseline10MBFooTest:!ConfigurationOfMBFooTests removeSelector: #bar!ConfigurationOfMBFooTests class removeSelector: #project!ConfigurationOfMBFooTests class removeSelector: #isMetacelloConfig!Smalltalk globals removeClassNamed: #ConfigurationOfMBFooTests!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34086238!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34086597!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34088022!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34088338!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34088521!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34089082!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34089217!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34089561!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34089915!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34090240!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34090611!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34091370!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34096308!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34096667!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34098092!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34098408!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34098591!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34099152!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34099287!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34099631!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34099985!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34100310!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34100681!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34101440!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34106378!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34106737!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34108162!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34108478!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34108661!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34109222!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34109357!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34109701!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34110055!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34110380!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34110751!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34111510!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:37'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!"MonticelloMocks"!"MonticelloMocks"!"MonticelloMocks"!!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34023421!one ^ 2! !!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34116303!one ^ 1! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 34116405!one	^ 1! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34116834!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:52.065971+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34117259!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:52.070772+00:00') #(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:52.070814+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34117972!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:53.027475+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34118397!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:53.032286+00:00') #(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:53.032335+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34119110!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:54.149514+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34119535!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:54.15357+00:00') #(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:54.153609+00:00') )! !!ManifestManifestResourcesTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34120247!ruleCodeCruftLeftInMethodsRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:55.158766+00:00') )! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37'!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #()! !!ManifestManifestResourcesTests class methodsFor: 'code-critics' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34120672!ruleOnlyReadOrWrittenTemporaryRuleV1TODO^ #(#(#(#RGMethodDefinition #(#MFClassA #method #false)) #'2015-12-05T19:37:55.163296+00:00') #(#(#RGMethodDefinition #(#MFClassB #method3 #false)) #'2015-12-05T19:37:55.163335+00:00') )! !Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted9!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted8!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted10!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted7!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted6!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted14!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted15!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted12!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted11!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted13!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted17!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted16!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted18!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted1!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted2!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted3!TestAsserter subclass: #MyTestClass	instanceVariableNames: 'testSelector expectedFails'	classVariableNames: 'Announcers HistoryAnnouncer'	poolDictionaries: ''	category: 'SUnit-Core-Kernel'!!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!simulateKeyStrokes: aString 	ActiveHand simulateKeyStrokes: aString.! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!simulateKeyStroke: aCharacterOrShortcut	ActiveHand simulateKeyStroke: aCharacterOrShortcut.! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!run: aResult	aResult runCase: self! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!failureLog		^Transcript			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isLogging	"By default, we're not logging failures. If you override this in 	a subclass, make sure that you override #failureLog"	^false			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!runCaseAsFailure: aSemaphore	[self resources do: [:each | each availableFor: self].	[self setUp.	self openDebuggerOnFailingTestMethod] ensure: [self tearDown]]		ensure: [aSemaphore signal]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!openDebuggerOnFailingTestMethod	"SUnit has halted one step in front of the failing test method. Step over the 'self halt' and 	 send into 'self perform: testSelector' to see the failure from the beginning"	self		halt;		performTest! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!run	| result |	result := self classForTestResult new.	[ self run: result ]		ensure: [ self classForTestResource resetResources: self resources ].	^ result! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!setUp! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!debugAsFailure	| semaphore |	semaphore := Semaphore new.	[ 	semaphore wait.	self classForTestResource resetResources: self resources ] fork.	(self class selector: testSelector) runCaseAsFailure: semaphore! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!logFailure: aString	self isLogging ifTrue: [		self failureLog 			cr; 			nextPutAll: aString; 			flush]			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!prepareToRunAgain 		"Used by the debugger when a test is restarted	I'm not 'hidding'' possible exceptions because I think it is best to popup a new debugger	if some one occurs and let the programmer decide what to do - Hernan"	self 		tearDown;		setUp! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!tearDown	! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!debug	[ (self class selector: testSelector) runCase ]		ensure: [ self classForTestResource resetResources: self resources ]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!runCase	self resources do: [:each | each availableFor: self].	[self setUp.	self performTest] ensure: [		self tearDown.		self cleanUpInstanceVariables]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!removeDependentFromHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!addDependentToHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!announce: anAnnouncementClass withResult: result	| event |	self shouldAnnounce ifFalse: [ ^ self ].		event := anAnnouncementClass asAnnouncement.	event testCase: self.	event testSelector: testSelector.	event testResult: result.	self announcer announce: event.! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!announce: anAnnouncementClass	^ self announce: anAnnouncementClass with: nil! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!shouldAnnounce	^ self class shouldAnnounce! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!announcer	^ self class announcer! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!expectedFailures	| pragmas |	^ expectedFails ifNil: [				pragmas := Pragma allNamed: #expectedFailure from: self class to: TestCase.		expectedFails := pragmas collect: [:each | each method selector  ].	]	! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!shouldPass	^self isExpectedFailure not! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isExpectedFailure	^self expectedFailures includes: testSelector! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!selector	^testSelector! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!resources	"We give TestCase this instance-side method so that methods polymorphic with TestSuite can be code-identical.  Having this instance-side method also helps when writing tests of resource behaviour. Except for such tests, it is rare to override this method and should not be done without thought.  If there were a good reason why a single test case needed to share tests requiring different resources, it might be legitimate."	^self class resources! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!printTestSelectorOn: aStream	testSelector		ifNotNil: [ 			| class |			class := self class whichClassIncludesSelector: testSelector.			class ~= self class				ifTrue: [ self printTestSelectorDefiningClass: class on: aStream ].			aStream				nextPutAll: '>>#';				nextPutAll: testSelector ]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!printOn: aStream	aStream nextPutAll: self class printString.	self printTestSelectorOn: aStream! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!printTestSelectorDefiningClass: aClass on: aStream	aStream << '('.	aClass printOn: aStream.	aStream << ')'! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!performTest	self perform: testSelector asSymbol! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!executeShould: aBlock inScopeOf: anExceptionalEvent withDescriptionContaining: aString	^[aBlock value. 	false] on: anExceptionalEvent		do: [:ex | ex return: (ex description includesSubstring: aString) ]			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!cleanUpInstanceVariables	self class allInstVarNames do: [ :name |		name = 'testSelector' ifFalse: [			self instVarNamed: name put: nil ] ]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!setTestSelector: aSymbol	testSelector := aSymbol! !!MyTestClass methodsFor: '*SUnit-UITesting' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34122377!simulateKeyStrokes: aString 	ActiveHand simulateKeyStrokes: aString.! !!MyTestClass methodsFor: '*SUnit-UITesting' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34122527!simulateKeyStroke: aCharacterOrShortcut	ActiveHand simulateKeyStroke: aCharacterOrShortcut.! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34122700!run: aResult	aResult runCase: self! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34122815!failureLog		^Transcript			! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34122924!isLogging	"By default, we're not logging failures. If you override this in 	a subclass, make sure that you override #failureLog"	^false			! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34123146!runCaseAsFailure: aSemaphore	[self resources do: [:each | each availableFor: self].	[self setUp.	self openDebuggerOnFailingTestMethod] ensure: [self tearDown]]		ensure: [aSemaphore signal]! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34123418!openDebuggerOnFailingTestMethod	"SUnit has halted one step in front of the failing test method. Step over the 'self halt' and 	 send into 'self perform: testSelector' to see the failure from the beginning"	self		halt;		performTest! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34123734!run	| result |	result := self classForTestResult new.	[ self run: result ]		ensure: [ self classForTestResource resetResources: self resources ].	^ result! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34123973!setUp! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34124058!debugAsFailure	| semaphore |	semaphore := Semaphore new.	[ 	semaphore wait.	self classForTestResource resetResources: self resources ] fork.	(self class selector: testSelector) runCaseAsFailure: semaphore! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34124348!logFailure: aString	self isLogging ifTrue: [		self failureLog 			cr; 			nextPutAll: aString; 			flush]			! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34124539!prepareToRunAgain 		"Used by the debugger when a test is restarted	I'm not 'hidding'' possible exceptions because I think it is best to popup a new debugger	if some one occurs and let the programmer decide what to do - Hernan"	self 		tearDown;		setUp! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34124876!tearDown	! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34124967!debug	[ (self class selector: testSelector) runCase ]		ensure: [ self classForTestResource resetResources: self resources ]! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34125172!runCase	self resources do: [:each | each availableFor: self].	[self setUp.	self performTest] ensure: [		self tearDown.		self cleanUpInstanceVariables]! !!MyTestClass methodsFor: 'dependencies' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34125407!removeDependentFromHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: 'dependencies' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34125586!addDependentToHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34125760!announce: anAnnouncementClass withResult: result	| event |	self shouldAnnounce ifFalse: [ ^ self ].		event := anAnnouncementClass asAnnouncement.	event testCase: self.	event testSelector: testSelector.	event testResult: result.	self announcer announce: event.! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34126107!announce: anAnnouncementClass	^ self announce: anAnnouncementClass with: nil! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34126264!shouldAnnounce	^ self class shouldAnnounce! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34126387!announcer	^ self class announcer! !!MyTestClass methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34126500!expectedFailures	| pragmas |	^ expectedFails ifNil: [				pragmas := Pragma allNamed: #expectedFailure from: self class to: TestCase.		expectedFails := pragmas collect: [:each | each method selector  ].	]	! !!MyTestClass methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34126791!shouldPass	^self isExpectedFailure not! !!MyTestClass methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34126910!isExpectedFailure	^self expectedFailures includes: testSelector! !!MyTestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34127054!selector	^testSelector! !!MyTestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34127157!resources	"We give TestCase this instance-side method so that methods polymorphic with TestSuite can be code-identical.  Having this instance-side method also helps when writing tests of resource behaviour. Except for such tests, it is rare to override this method and should not be done without thought.  If there were a good reason why a single test case needed to share tests requiring different resources, it might be legitimate."	^self class resources! !!MyTestClass methodsFor: 'printing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34127696!printTestSelectorOn: aStream	testSelector		ifNotNil: [ 			| class |			class := self class whichClassIncludesSelector: testSelector.			class ~= self class				ifTrue: [ self printTestSelectorDefiningClass: class on: aStream ].			aStream				nextPutAll: '>>#';				nextPutAll: testSelector ]! !!MyTestClass methodsFor: 'printing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34128071!printOn: aStream	aStream nextPutAll: self class printString.	self printTestSelectorOn: aStream! !!MyTestClass methodsFor: 'printing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34128247!printTestSelectorDefiningClass: aClass on: aStream	aStream << '('.	aClass printOn: aStream.	aStream << ')'! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34128436!performTest	self perform: testSelector asSymbol! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34128564!executeShould: aBlock inScopeOf: anExceptionalEvent withDescriptionContaining: aString	^[aBlock value. 	false] on: anExceptionalEvent		do: [:ex | ex return: (ex description includesSubstring: aString) ]			! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34128853!cleanUpInstanceVariables	self class allInstVarNames do: [ :name |		name = 'testSelector' ifFalse: [			self instVarNamed: name put: nil ] ]! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34129074!setTestSelector: aSymbol	testSelector := aSymbol! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!correspondingClass	(self name endsWith: 'Test' ) ifFalse: [^nil].	^Smalltalk globals 		at: (self name allButLast: 4) asSymbol		ifAbsent: [nil]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!hasPassedTest	^ (self history at: #passed) isEmpty not ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!hasErrorTest	^ (self history at: #errors) isEmpty not ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!hasFailedTest	^ (self history at: #failures) isEmpty not ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!coverageForClass: cls	"returns the test coverage of all the methods included inherited ones"	^ self coverageForClass: cls until: ProtoObject! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!coverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set."	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #coverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #coverageForClass: instead' ].	"May happen with Transcript"	cls isBehavior		ifFalse: [ cls := cls class ].	^ self coverageForClass: cls! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!coverageForClass: cls until: aRootClass	"returns the test coverage of all the methods included inherited ones but stopping at aRootClass included"		| definedMethods testedMethods untestedMethods |	definedMethods := cls allSelectorsAboveUntil: aRootClass.	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!localCoverageForClass: cls		| definedMethods testedMethods untestedMethods |	definedMethods := cls selectors.	"It happens for IdentityBag / IdentityBagTest"	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].						"testedMethods contains all the methods send in test methods, which probably contains methods that have nothign to do with collection"	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!localCoverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set. The computation of the coverage takes only into	account the methods defined locally in the tested class. See coverage for a more global 	coverage"	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #localCoverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #localCoverageForClass: instead' ].	cls isBehavior		ifFalse: [ cls := cls class ].	^ self localCoverageForClass: cls! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!coveragePercentage	^ self coverage first! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!localCoveragePercentage	^ self localCoverage first! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!localCoverageAsString	| cov className |	cov := self localCoverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!coverageAsString	| cov className |	cov := self coverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!announcers	^ Announcers ifNil: [ Announcers := Dictionary new ] ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!shouldAnnounce	^ self announcers includesKey: self! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!announcer 	^ self announcers at: self ifAbsentPut: [ Announcer new ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!resetAnnouncer	self announcers removeKey: self ifAbsent: []! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!allTestSelectors	| answer pivotClass lookupRoot |	answer := Set withAll: self testSelectors.	self shouldInheritSelectors		ifTrue:			[pivotClass := self.			lookupRoot := self lookupHierarchyRoot.			[pivotClass == lookupRoot]				whileFalse:					[pivotClass := pivotClass superclass.					answer addAll: pivotClass testSelectors]].	^answer asSortedCollection asOrderedCollection! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!lookupHierarchyRoot	^TestCase! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!testSelectors	^(self selectors select: [ :each | (each beginsWith: 'test') and: [each numArgs isZero]])! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!resources	^#()! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!historyAnnouncer	^ HistoryAnnouncer ifNil: [  HistoryAnnouncer := Announcer new ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!sunitVersion	^'4.0'! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!run: aSymbol	^(self selector: aSymbol) run! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!selector: aSymbol	^self new setTestSelector: aSymbol! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!debug: aSymbol	^(self selector: aSymbol) debug! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!suite	^self buildSuite! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!initialize	super initialize.	SystemAnnouncer uniqueInstance unsubscribe: self.	SystemAnnouncer uniqueInstance weak		when: MethodAdded, MethodModified, MethodRemoved 		send: #methodChanged: 		to: self.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!methodChanged: anEvent	"Remove the changed method from the known test results."		| cls sel |	cls := anEvent methodClass.	(cls inheritsFrom: TestCase)		ifFalse: [^ self].	sel := anEvent selector.	(sel beginsWith: 'test')		ifFalse: [^ self].	self classForTestResult removeFromTestHistory: sel in: cls.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!addTestsFor: classNameString toSuite: suite	| cls |	cls := Smalltalk globals at: classNameString ifAbsent: [ ^ suite ].	^ cls isAbstract		ifTrue: [ 			cls allSubclasses				do: [ :each | 					each isAbstract						ifFalse: [ each addToSuiteFromSelectors: suite ] ].			suite ]		ifFalse: [ cls addToSuiteFromSelectors: suite ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!addToSuite: suite fromMethods: testMethods 	testMethods do:  [ :selector | 			suite addTest: (self selector: selector) ].	^suite! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!addToSuiteFromSelectors: suite	^self addToSuite: suite fromMethods: (self shouldInheritSelectors		ifTrue: [ self allTestSelectors ]		ifFalse: [self testSelectors ])! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!buildSuite	| suite |	^self isAbstract		ifTrue: 			[suite := self suiteClass named: self name asString.			self allSubclasses 				do: [:each | each isAbstract ifFalse: [suite addTest: each buildSuiteFromSelectors]].			suite]		ifFalse: [self buildSuiteFromSelectors]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!buildSuiteFromLocalSelectors	^self buildSuiteFromMethods: self testSelectors			! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!buildSuiteFromSelectors	^self buildSuiteFromMethods: self allTestSelectors! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!buildSuiteFromAllSelectors	^self buildSuiteFromMethods: self allTestSelectors			! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!buildSuiteFromMethods: testMethods	^testMethods		inject: (self suiteClass named: self name asString)		into: [:suite :selector |			suite				addTest: (self selector: selector);				yourself]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!resetHistory	history := nil! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!history	^ history ifNil: [ history := self newTestDictionary ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!generateLastStoredRunMethod	self shouldGenerateLastStoredRunMethod ifTrue: [		self class			compile: (self lastRunMethodNamed: #lastStoredRun)			classified: 'history' ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!newTestDictionary	^ Dictionary new at: #timeStamp put: DateAndTime now;		at: #passed put: Set new;		at: #failures put: Set new;		at: #errors put: Set new;		yourself		! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!history: aDictionary	history := aDictionary.	self historyAnnouncer announce: (TestSuiteEnded result: self)! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!lastRun	^ self classForTestResult historyFor: self! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!lastRunMethodNamed: aSelector		^ String streamContents: [:str |		str nextPutAll: aSelector asString ;cr.		str tab; nextPutAll: '^ ', (self lastRun) storeString]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!lastStoredRun	^ ((Dictionary new) add: (#failures->#()); add: (#passed->#()); add: (#errors->#()); yourself)! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!shouldGenerateLastStoredRunMethod	| sameRun |		(self class includesSelector: #lastStoredRun)		ifFalse: [^ true].	sameRun := #(#passed #failures #errors) inject: true into: 		[ :ok :set | ok and: [(self lastRun at: set) = (self lastStoredRun at: set) ]].	^ sameRun not! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isUnitTest	^true! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #TestCase			! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!storedMethodPassed: aSelector	^ (self lastStoredRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!shouldInheritSelectors	"I should inherit from an Abstract superclass but not from a concrete one by default, unless I have no testSelectors in which case I must be expecting to inherit them from my superclass.  If a test case with selectors wants to inherit selectors from a concrete superclass, override this to true in that subclass."		^self ~~ self lookupHierarchyRoot		and: [self superclass isAbstract or: [self testSelectors isEmpty]]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!storedMethodRaisedError: aSelector	^ (self lastStoredRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!methodPassed: aSelector	^ (self lastRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!methodProgressed: aSelector	^ ((self storedMethodRaisedError: aSelector) or: [self storedMethodFailed: aSelector])		and: [self methodPassed: aSelector]		! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!methodRegressed: aSelector	^ (self storedMethodPassed: aSelector) and: [(self methodFailed: aSelector) or: [self methodRaisedError: aSelector]]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!storedMethodFailed: aSelector	^ (self lastStoredRun at: #failures) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!isTestCase	^ true! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!methodRaisedError: aSelector	^ (self lastRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!hasMethodBeenRun: aSelector	^ ((self lastRun at: #errors),		(self lastRun at: #failures),		(self lastRun at: #passed))			includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:37'!methodFailed: aSelector	^ (self lastRun at: #failures) includes: aSelector! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34136528!correspondingClass	(self name endsWith: 'Test' ) ifFalse: [^nil].	^Smalltalk globals 		at: (self name allButLast: 4) asSymbol		ifAbsent: [nil]! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34136761!hasPassedTest	^ (self history at: #passed) isEmpty not ! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34136904!hasErrorTest	^ (self history at: #errors) isEmpty not ! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34137046!hasFailedTest	^ (self history at: #failures) isEmpty not ! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34137191!coverageForClass: cls	"returns the test coverage of all the methods included inherited ones"	^ self coverageForClass: cls until: ProtoObject! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34137419!coverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set."	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #coverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #coverageForClass: instead' ].	"May happen with Transcript"	cls isBehavior		ifFalse: [ cls := cls class ].	^ self coverageForClass: cls! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34138123!coverageForClass: cls until: aRootClass	"returns the test coverage of all the methods included inherited ones but stopping at aRootClass included"		| definedMethods testedMethods untestedMethods |	definedMethods := cls allSelectorsAboveUntil: aRootClass.	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34138887!localCoverageForClass: cls		| definedMethods testedMethods untestedMethods |	definedMethods := cls selectors.	"It happens for IdentityBag / IdentityBagTest"	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].						"testedMethods contains all the methods send in test methods, which probably contains methods that have nothign to do with collection"	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34139698!localCoverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set. The computation of the coverage takes only into	account the methods defined locally in the tested class. See coverage for a more global 	coverage"	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #localCoverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #localCoverageForClass: instead' ].	cls isBehavior		ifFalse: [ cls := cls class ].	^ self localCoverageForClass: cls! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34140541!coveragePercentage	^ self coverage first! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34140668!localCoveragePercentage	^ self localCoverage first! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34140805!localCoverageAsString	| cov className |	cov := self localCoverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34141211!coverageAsString	| cov className |	cov := self coverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34141607!announcers	^ Announcers ifNil: [ Announcers := Dictionary new ] ! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34141758!shouldAnnounce	^ self announcers includesKey: self! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34141895!announcer 	^ self announcers at: self ifAbsentPut: [ Announcer new ]! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34142050!resetAnnouncer	self announcers removeKey: self ifAbsent: []! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34142196!allTestSelectors	| answer pivotClass lookupRoot |	answer := Set withAll: self testSelectors.	self shouldInheritSelectors		ifTrue:			[pivotClass := self.			lookupRoot := self lookupHierarchyRoot.			[pivotClass == lookupRoot]				whileFalse:					[pivotClass := pivotClass superclass.					answer addAll: pivotClass testSelectors]].	^answer asSortedCollection asOrderedCollection! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34142667!lookupHierarchyRoot	^TestCase! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34142783!testSelectors	^(self selectors select: [ :each | (each beginsWith: 'test') and: [each numArgs isZero]])! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34142973!resources	^#()! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143075!historyAnnouncer	^ HistoryAnnouncer ifNil: [  HistoryAnnouncer := Announcer new ]! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143243!sunitVersion	^'4.0'! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143349!run: aSymbol	^(self selector: aSymbol) run! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143479!selector: aSymbol	^self new setTestSelector: aSymbol! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143619!debug: aSymbol	^(self selector: aSymbol) debug! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143753!suite	^self buildSuite! !!MyTestClass class methodsFor: 'initialize - event' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34143863!initialize	super initialize.	SystemAnnouncer uniqueInstance unsubscribe: self.	SystemAnnouncer uniqueInstance weak		when: MethodAdded, MethodModified, MethodRemoved 		send: #methodChanged: 		to: self.! !!MyTestClass class methodsFor: 'initialize - event' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34144155!methodChanged: anEvent	"Remove the changed method from the known test results."		| cls sel |	cls := anEvent methodClass.	(cls inheritsFrom: TestCase)		ifFalse: [^ self].	sel := anEvent selector.	(sel beginsWith: 'test')		ifFalse: [^ self].	self classForTestResult removeFromTestHistory: sel in: cls.! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34144551!addTestsFor: classNameString toSuite: suite	| cls |	cls := Smalltalk globals at: classNameString ifAbsent: [ ^ suite ].	^ cls isAbstract		ifTrue: [ 			cls allSubclasses				do: [ :each | 					each isAbstract						ifFalse: [ each addToSuiteFromSelectors: suite ] ].			suite ]		ifFalse: [ cls addToSuiteFromSelectors: suite ]! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34144969!addToSuite: suite fromMethods: testMethods 	testMethods do:  [ :selector | 			suite addTest: (self selector: selector) ].	^suite! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34145186!addToSuiteFromSelectors: suite	^self addToSuite: suite fromMethods: (self shouldInheritSelectors		ifTrue: [ self allTestSelectors ]		ifFalse: [self testSelectors ])! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34145439!buildSuite	| suite |	^self isAbstract		ifTrue: 			[suite := self suiteClass named: self name asString.			self allSubclasses 				do: [:each | each isAbstract ifFalse: [suite addTest: each buildSuiteFromSelectors]].			suite]		ifFalse: [self buildSuiteFromSelectors]! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34145796!buildSuiteFromLocalSelectors	^self buildSuiteFromMethods: self testSelectors			! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34145964!buildSuiteFromSelectors	^self buildSuiteFromMethods: self allTestSelectors! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34146125!buildSuiteFromAllSelectors	^self buildSuiteFromMethods: self allTestSelectors			! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34146294!buildSuiteFromMethods: testMethods	^testMethods		inject: (self suiteClass named: self name asString)		into: [:suite :selector |			suite				addTest: (self selector: selector);				yourself]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34146574!resetHistory	history := nil! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34146688!history	^ history ifNil: [ history := self newTestDictionary ]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34146837!generateLastStoredRunMethod	self shouldGenerateLastStoredRunMethod ifTrue: [		self class			compile: (self lastRunMethodNamed: #lastStoredRun)			classified: 'history' ]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34147095!newTestDictionary	^ Dictionary new at: #timeStamp put: DateAndTime now;		at: #passed put: Set new;		at: #failures put: Set new;		at: #errors put: Set new;		yourself		! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34147354!history: aDictionary	history := aDictionary.	self historyAnnouncer announce: (TestSuiteEnded result: self)! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34147549!lastRun	^ self classForTestResult historyFor: self! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34147686!lastRunMethodNamed: aSelector		^ String streamContents: [:str |		str nextPutAll: aSelector asString ;cr.		str tab; nextPutAll: '^ ', (self lastRun) storeString]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34147937!lastStoredRun	^ ((Dictionary new) add: (#failures->#()); add: (#passed->#()); add: (#errors->#()); yourself)! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34148132!shouldGenerateLastStoredRunMethod	| sameRun |		(self class includesSelector: #lastStoredRun)		ifFalse: [^ true].	sameRun := #(#passed #failures #errors) inject: true into: 		[ :ok :set | ok and: [(self lastRun at: set) = (self lastStoredRun at: set) ]].	^ sameRun not! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34148493!isUnitTest	^true! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34148596!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #TestCase			! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34148830!storedMethodPassed: aSelector	^ (self lastStoredRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34149001!shouldInheritSelectors	"I should inherit from an Abstract superclass but not from a concrete one by default, unless I have no testSelectors in which case I must be expecting to inherit them from my superclass.  If a test case with selectors wants to inherit selectors from a concrete superclass, override this to true in that subclass."		^self ~~ self lookupHierarchyRoot		and: [self superclass isAbstract or: [self testSelectors isEmpty]]! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34149530!storedMethodRaisedError: aSelector	^ (self lastStoredRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34149706!methodPassed: aSelector	^ (self lastRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34149865!methodProgressed: aSelector	^ ((self storedMethodRaisedError: aSelector) or: [self storedMethodFailed: aSelector])		and: [self methodPassed: aSelector]		! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34150107!methodRegressed: aSelector	^ (self storedMethodPassed: aSelector) and: [(self methodFailed: aSelector) or: [self methodRaisedError: aSelector]]! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34150337!storedMethodFailed: aSelector	^ (self lastStoredRun at: #failures) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34150510!isTestCase	^ true! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34150614!methodRaisedError: aSelector	^ (self lastRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34150778!hasMethodBeenRun: aSelector	^ ((self lastRun at: #errors),		(self lastRun at: #failures),		(self lastRun at: #passed))			includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:37' prior: 34151008!methodFailed: aSelector	^ (self lastRun at: #failures) includes: aSelector! !Smalltalk globals removeClassNamed: #MyTestClass!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted21!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted19!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted22!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted23!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted20!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted26!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted27!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted25!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted24!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted28!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted29!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted30!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted1!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted5!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted4!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted2!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted3!Smalltalk globals removeClassNamed: #TraitForTestToBeDeleted1!"GoferFoo"!Smalltalk globals removeClassNamed: #GoferFoo!"GoferFoo"!"GoferFoo"!Smalltalk globals removeClassNamed: #GoferFoo!"GoferFoo"!Smalltalk globals removeClassNamed: #GoferFoo!"GoferBar"!!GoferBar methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!foo! !GoferBar removeSelector: #foo!Smalltalk globals removeClassNamed: #GoferBar!"GoferBar"!!GoferBar methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!foo! !GoferBar removeSelector: #foo!Smalltalk globals removeClassNamed: #GoferBar!"GoferFoo"!!GoferFoo methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!initialize InstanceSide := true! !!GoferFoo class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!initialize ClassSide := true! !GoferFoo removeSelector: #initialize!GoferFoo class removeSelector: #initialize!Smalltalk globals removeClassNamed: #GoferFoo!"GoferBar"!!GoferBar methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!foo! !GoferBar removeSelector: #foo!Smalltalk globals removeClassNamed: #GoferBar!"GoferFoo"!"GoferBar"!"GoferFoo"!"GoferBar"!"GoferFoo"!"GoferBar"!Smalltalk globals removeClassNamed: #GoferFoo!Smalltalk globals removeClassNamed: #GoferBar!"GoferFoo"!Smalltalk globals removeClassNamed: #GoferFoo!"GoferFoo"!Smalltalk globals removeClassNamed: #GoferFoo!!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34014729!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34015005!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34169466!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34169742!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34169943!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34170219!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34170420!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34170696!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34170897!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34171173!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34171374!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34171650!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !Object subclass: #'ConfigurationOfC'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfC'!!ConfigurationOfC methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfC methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfC methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34172476!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfC methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34172818!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfC class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfC class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34174192!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfC class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34174491!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfC class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34174657!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfC class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34175201!project	^self new project! !!ConfigurationOfC class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34175319!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfC class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34175646!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfC class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34175983!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfC class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34176291!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfC class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34176645!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfC class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34177387!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfC methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/C/main'. ].! !!ConfigurationOfC methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfC methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34181109!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/C/main'. ].! !!ConfigurationOfC methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34181369!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!m1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!m1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!m1! !!Trait method!one	^ 1! !!Trait method!classOne	^ 1! !!SlotTestsClassA methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!m1! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #[2r1010 8r333 16rFF]! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #[]! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #[ 1 2 3 4 ]! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #[   0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 ]! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #[ 0 255 ]! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #( #[1] #[2] )! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #(nil true false)! !!OCArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38'!array ^ #(#nil #true #false #'nil' #'true' #'false')! !Object subclass: #ConfigurationOfVersionnerTestXMLParser	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'Versionner-Tests-Resources'!!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34184866!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34185055!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34185254!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34185655!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34186095!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34187602!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34189111!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34194374!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34195257!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34195704!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34195902!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34196042!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34196233!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34196414!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34196579!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34196892!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'unloading Metacello' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34197279!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline841: spec	<version: '84.1'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.		spec 			project: 'XMLWriter' with: [				spec					className: #ConfigurationOfVersionnerTestXMLWriter;					versionString: #'stable';					repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main' ];			project: 'BitmapCharacterSet' with: [				spec					className: #ConfigurationOfVersionnerTestBitmapCharacterSet;					versionString: #'stable';					repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main' ].		spec 			package: 'VersionnerTestXML-Parser' with: [				spec requires: #('BitmapCharacterSet' 'XMLWriter' ). ];			package: 'VersionnerTestXML-Tests-Parser' with: [				spec requires: #('VersionnerTestXML-Parser' ). ].		spec 			group: 'default' with: #('Core' 'Tests' );			group: 'Core' with: #('VersionnerTestXML-Parser' );			group: 'Tests' with: #('VersionnerTestXML-Tests-Parser' ). ].! !Smalltalk globals removeClassNamed: #ConfigurationOfVersionnerTestXMLParser!Object subclass: #ConfigurationOfVersionnerTestXMLParser	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'Versionner-Tests-Resources'!!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34202172!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34202361!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34202560!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34202961!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34203401!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34204908!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34206417!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34211680!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34212563!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34213010!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34213208!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34213348!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34213539!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34213720!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34213885!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34214198!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'unloading Metacello' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34214585!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline999: spec	<version: '999'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.		spec 			project: 'XMLWriter' with: [				spec					className: #ConfigurationOfVersionnerTestXMLWriter;					versionString: #'stable';					repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main' ];			project: 'BitmapCharacterSet' with: [				spec					className: #ConfigurationOfVersionnerTestBitmapCharacterSet;					versionString: #'stable';					repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main' ].		spec 			package: 'VersionnerTestXML-Parser' with: [				spec requires: #('BitmapCharacterSet' 'XMLWriter' ). ];			package: 'VersionnerTestXML-Tests-Parser' with: [				spec requires: #('VersionnerTestXML-Parser' ). ].		spec 			group: 'default' with: #('Core' 'Tests' );			group: 'Core' with: #('VersionnerTestXML-Parser' );			group: 'Tests' with: #('VersionnerTestXML-Tests-Parser' ). ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34207097!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '999'.! !Smalltalk globals removeClassNamed: #ConfigurationOfVersionnerTestXMLParser!Object subclass: #ConfigurationOfVersionnerTestXMLParser	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'Versionner-Tests-Resources'!!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34219699!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34219888!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34220087!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34220488!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34220928!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34222435!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34223944!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34229207!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34230090!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34230537!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34230735!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34230875!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34231066!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34231247!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34231412!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34231725!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'unloading Metacello' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34232112!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34224624!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.0-baseline'.! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34235643!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '2.0-baseline'.! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34235875!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.! !Smalltalk globals removeClassNamed: #ConfigurationOfVersionnerTestXMLParser!----End fileIn----!----End fileIn----!!CodeImportTestCaseTestClass methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:38'!testImportAClass! !!CodeImportTestCaseTestClass methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:38'!testImportAMethod! !!CodeImportTestCaseTestClass methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:38'!importAClass! !----End fileIn----!----End fileIn----!!CodeImportTestCaseTestClass commentStamp: '<historical>' prior: 0!I'm a nice comment, treat me well :).!----End fileIn----!----End fileIn----!!CodeImportTestCaseTestClass commentStamp: '<historical>' prior: 0!I'm a nice comment!!, treat me well :).!----End fileIn----!----End fileIn----!!CodeImportTestCaseTestClass methodsFor: 'some protocol' stamp: 'GuillermoPolito 5/2/2012 13:35'!someMethod	^true! !----End fileIn----!----End fileIn----!!CodeImportTestCaseTestClass methodsFor: 'some protocol'!someMethod	^true! !----End fileIn----!----End fileIn----!!CodeImportTestCaseTestClass methodsFor: 'some protocol' stamp: 'GuillermoPolito 5/2/2012 13:35'!someMethod	^true! !----End fileIn----!2+2!----End fileIn----!2+2!----End fileIn----!Object subclass: #'ConfigurationOfZ'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfZ'!!ConfigurationOfZ methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfZ methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfZ methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34237750!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfZ methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34238092!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfZ class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfZ class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34239466!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfZ class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34239765!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfZ class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34239931!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfZ class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34240475!project	^self new project! !!ConfigurationOfZ class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34240593!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfZ class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34240920!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfZ class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34241257!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfZ class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34241565!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfZ class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34241919!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfZ class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34242661!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfZ methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/demarey/Versionner/main'. ].! !!ConfigurationOfZ methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !Object subclass: #'ConfigurationOfVersionnerTest'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfVersionnerTest'!!ConfigurationOfVersionnerTest methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfVersionnerTest methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTest methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34247042!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfVersionnerTest methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34247397!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfVersionnerTest class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTest class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34248810!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfVersionnerTest class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34249122!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfVersionnerTest class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34249301!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfVersionnerTest class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34249858!project	^self new project! !!ConfigurationOfVersionnerTest class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34249989!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfVersionnerTest class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34250329!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfVersionnerTest class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34250679!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfVersionnerTest class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34251000!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfVersionnerTest class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34251367!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfVersionnerTest class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34252122!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTest methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: ''. ].! !!ConfigurationOfVersionnerTest methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !Smalltalk globals removeClassNamed: #ConfigurationOfVersionnerTest!!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!y_bearing	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y_bearing! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!y_bearing: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y_bearing put: anObject! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!y_advance	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y_advance! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!y_advance: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y_advance put: anObject! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!x_bearing	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x_bearing! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!x_bearing: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x_bearing put: anObject! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!height	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #height! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!height: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #height put: anObject! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!width	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #width! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!width: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #width put: anObject! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!x_advance	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x_advance! !!CairoTextExtents methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:38'!x_advance: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x_advance put: anObject! !!ClassForTestToBeDeleted31 class methodsFor: ''!you! !!ClassForTestToBeDeleted32 class methodsFor: ''!you! !!ClassForTestToBeDeleted36 methodsFor: ''!you! !!ClassForTestToBeDeleted37 methodsFor: ''!you! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38' prior: 34260068!initialize	super initialize.	self class initializeSlots: self.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38' prior: 34260349!initialize	super initialize.	self class initializeSlots: self.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38' prior: 34260630!initialize	super initialize.	self class initializeSlots: self.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38' prior: 34260911!initialize	super initialize.	self class initializeSlots: self.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:38' prior: 34261192!initialize	super initialize.	self class initializeSlots: self.! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34261494!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34261683!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34261882!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34262283!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34262723!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34264230!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34265739!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:38'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34271002!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34271885!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34272332!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34272530!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34272670!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34272861!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34273042!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34273207!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34273520!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'unloading Metacello' stamp: 'MarcinKopacz 12/5/2015 19:38' prior: 34273907!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !(Smalltalk globals at: #AutoGeneratedClassForTestingSystemChanges1) rename: #AutoGeneratedClassForTestingSystemChanges2!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted52!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted53!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted54!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted62!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted64!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted60!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted63!Smalltalk globals removeClassNamed: #ClassForTestToBeDeleted61!SystemOrganization addCategory: #MonticelloMocks!Object subclass: #MCMockClassD	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockClassD methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:21' prior: 34021491!one	^ 1! !Object variableSubclass: #MCMockClassE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockClassE class methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:22' prior: 34021586!two	^ 2! !Object subclass: #MCMockClassF	instanceVariableNames: ''	classVariableNames: 'Foo'	poolDictionaries: ''	category: 'MonticelloMocks'!Object variableWordSubclass: #MCMockClassG	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!Object variableByteSubclass: #MCMockClassH	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!Object weakSubclass: #MCMockClassI	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!MCMock subclass: #MCMockClassA	instanceVariableNames: 'ivar'	classVariableNames: 'CVar InitializationOrder'	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 34021665!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!MCMockClassA subclass: #MCMockASubclass	instanceVariableNames: 'x'	classVariableNames: 'Y'	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockASubclass class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:23' prior: 34021876!initialize	InitializationOrder := InitializationOrder		ifNil: [ -100 ] "let the test fail"		ifNotNil: [ InitializationOrder + 1.]! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34022092!variables	^ x + Y + MCMockClassA! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34022208!variables2	^ ivar + CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'cwp 8/10/2003 02:31' prior: 34022321!cVar	^ CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: '10/14/2010 15:41' prior: 34022418!initializationOrder	^ InitializationOrder! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:21' prior: 34022561!initialize	CVar := #initialized.	InitializationOrder := 1.! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34022708!one	^ 1! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'stephaneducasse 2/4/2006 20:47' prior: 34022816!touchCVar	CVar := #touched! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 34022925!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 34023016!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: '' prior: 34023066!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 34023157!d	^ 'd'! !!MCMockClassA methodsFor: 'boolean' stamp: 'cwp 7/13/2003 02:49' prior: 34023235!falsehood	^ false! !!MCMockClassA methodsFor: 'boolean' stamp: 'ab 7/7/2003 23:21' prior: 34023321!moreTruth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 34116510!one	^ 1! !!MCMockClassA methodsFor: 'drag''n''drop' stamp: 'avi 9/23/2003 17:14' prior: 34023505!q! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 34023588!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 34023683!two	^ 2! !MCMock subclass: #MCMockClassB	instanceVariableNames: 'ivarb'	classVariableNames: 'CVar'	poolDictionaries: 'MCMockAPoolDictionary'	category: 'MonticelloMocks'!MCMockClassB class	instanceVariableNames: 'ciVar'!!MCMockClassB commentStamp: '' prior: 34024394!This comment has a bang!! Bang!! Bang!!!MCMockClassB class	instanceVariableNames: 'ciVar'!!MCSnapshotTest methodsFor: '*MonticelloMocks' stamp: 'cyrilledelaunay 1/21/2011 12:10' prior: 34023784!mockClassExtension	"I change the protocol of this method to resolve the failing test: MCChangeNotificationTest >> testExtMethodModified. This test basically test that when we modified an extension method, the extended package is marked as 'modified'. The problem is that Monticello treat differently a classic method from an extension method, and this only by checking if the protocol name start with a star. Therefore, if the protocol does not match the extending package name, the extending package name will never be notified, and the test will fail. " ! !MCMockClassA initialize!MCMockASubclass initialize!----End fileIn----!Smalltalk globals removeClassNamed: #MCMockClassB!MCSnapshotTest removeSelector: #mockClassExtension!MCMockClassA removeSelector: #two!MCMockClassA removeSelector: #truth!MCMockClassA removeSelector: #q!MCMockClassA removeSelector: #one!MCMockClassA removeSelector: #moreTruth!MCMockClassA removeSelector: #falsehood!MCMockClassA removeSelector: #d!MCMockClassA removeSelector: #c!MCMockClassA removeSelector: #b!MCMockClassA removeSelector: #a!MCMockClassA class removeSelector: #touchCVar!MCMockClassA class removeSelector: #one!MCMockClassA class removeSelector: #initialize!MCMockClassA class removeSelector: #initializationOrder!MCMockClassA class removeSelector: #cVar!MCMockASubclass removeSelector: #variables2!MCMockASubclass removeSelector: #variables!MCMockASubclass class removeSelector: #initialize!Smalltalk globals removeClassNamed: #MCMockASubclass!Smalltalk globals removeClassNamed: #MCMockClassA!Smalltalk globals removeClassNamed: #MCMockClassI!Smalltalk globals removeClassNamed: #MCMockClassH!Smalltalk globals removeClassNamed: #MCMockClassG!Smalltalk globals removeClassNamed: #MCMockClassF!MCMockClassE class removeSelector: #two!Smalltalk globals removeClassNamed: #MCMockClassE!MCMockClassD removeSelector: #one!Smalltalk globals removeClassNamed: #MCMockClassD!SystemOrganization addCategory: #MonticelloMocks!Object subclass: #MCMockClassD	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockClassD methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:21'!one	^ 1! !Object variableSubclass: #MCMockClassE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockClassE class methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:22'!two	^ 2! !Object subclass: #MCMockClassF	instanceVariableNames: ''	classVariableNames: 'Foo'	poolDictionaries: ''	category: 'MonticelloMocks'!Object variableWordSubclass: #MCMockClassG	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!Object variableByteSubclass: #MCMockClassH	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!Object weakSubclass: #MCMockClassI	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloMocks'!MCMock subclass: #MCMockClassA	instanceVariableNames: 'ivar'	classVariableNames: 'CVar InitializationOrder'	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 0!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!MCMockClassA subclass: #MCMockASubclass	instanceVariableNames: 'x'	classVariableNames: 'Y'	poolDictionaries: ''	category: 'MonticelloMocks'!!MCMockASubclass class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:23'!initialize	InitializationOrder := InitializationOrder		ifNil: [ -100 ] "let the test fail"		ifNotNil: [ InitializationOrder + 1.]! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!variables	^ x + Y + MCMockClassA! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!variables2	^ ivar + CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'cwp 8/10/2003 02:31'!cVar	^ CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: '10/14/2010 15:41'!initializationOrder	^ InitializationOrder! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:21'!initialize	CVar := #initialized.	InitializationOrder := 1.! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21'!one	^ 1! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'stephaneducasse 2/4/2006 20:47'!touchCVar	CVar := #touched! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29'!a	^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29'!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric'!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31'!d	^ 'd'! !!MCMockClassA methodsFor: 'boolean' stamp: 'cwp 7/13/2003 02:49'!falsehood	^ false! !!MCMockClassA methodsFor: 'boolean' stamp: 'ab 7/7/2003 23:21'!moreTruth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22'!one	^ 1! !!MCMockClassA methodsFor: 'drag''n''drop' stamp: 'avi 9/23/2003 17:14'!q! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31'!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28'!two	^ 2! !MCMock subclass: #MCMockClassB	instanceVariableNames: 'ivarb'	classVariableNames: 'CVar'	poolDictionaries: 'MCMockAPoolDictionary'	category: 'MonticelloMocks'!MCMockClassB class	instanceVariableNames: 'ciVar'!!MCMockClassB commentStamp: '' prior: 0!This comment has a bang!! Bang!! Bang!!!MCMockClassB class	instanceVariableNames: 'ciVar'!!MCSnapshotTest methodsFor: '*MonticelloMocks' stamp: 'cyrilledelaunay 1/21/2011 12:10'!mockClassExtension	"I change the protocol of this method to resolve the failing test: MCChangeNotificationTest >> testExtMethodModified. This test basically test that when we modified an extension method, the extended package is marked as 'modified'. The problem is that Monticello treat differently a classic method from an extension method, and this only by checking if the protocol name start with a star. Therefore, if the protocol does not match the extending package name, the extending package name will never be notified, and the test will fail. " ! !MCMockClassA initialize!MCMockASubclass initialize!----End fileIn----!!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34289646!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m13 ^self m12! !!Trait method!aliasM11 ^11! !!Trait method!m11 ^11! !!Trait method!m12 ^12! !!Trait method!aliasM11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m12 ^12! !!Trait method!aliasM11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m12 ^12! !!Trait method!aliasM11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m12 ^12! !!Trait method!aliasM11 ^11! !!Trait method!m13 ^self m12! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!= anObject! !!Trait method!equals: anObject! !!Trait method!equals: anObject! !!Trait method!equals: anObject! !!Trait method!equals: anObject! !!Trait method!equals: anObject! !!Trait method!% anObject! !!Trait method!% anObject! !!Trait method!% anObject! !!Trait method!% anObject! !!Trait method!% anObject! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!x: a y: b z: c! !!Trait method!myX: a y: b z: c! !!Trait method!myX: a y: b z: c! !!Trait method!myX: a y: b z: c! !!Trait method!myX: a y: b z: c! !!Trait method!myX: a y: b z: c! !!Trait method!m12 ^12! !!Trait method!x: a y: b z: c! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!= anObject! !!Trait method!m12 ^12! !!Trait method!x: a y: b z: c! !!Trait method!m13 ^self m12! !!Trait method!= anObject! !!Trait method!m12 ^12! !!Trait method!x: a y: b z: c! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!= anObject! !!Trait method!m12 ^12! !!Trait method!x: a y: b z: c! !!Trait method!m13 ^self m12! !!Trait method!= anObject! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34294743!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34297546!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34300349!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34303152!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34305955!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34308758!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34311561!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34314364!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34317167!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34319970!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34322741!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34325544!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!ClassForTestToBeDeleted67 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!aMethodWithSenders ^ self! !!ClassForTestToBeDeleted67 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!anotherMethod ^self aMethodWithSenders! !!ClassForTestToBeDeleted68 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!yetAnotherMethod ^self aMethodWithSenders! !!ClassForTestToBeDeleted78 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted72 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted71 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted76 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted69 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted84 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted81 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted85 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted87 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted79 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted94 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted96 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted89 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted95 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted90 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted99 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:39'!messageNeverSentInTheSystemXXXXThisIsForTest ^self! !!SlotTestsClassA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!slot1	 ^slot1! !!SlotTestsClassA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!slot1: anObject	slot1:= anObject.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:39'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:39' prior: 34330951!initialize	super initialize.	self class initializeSlots: self.! !!SlotTestsClassA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!slot1	 ^slot1! !!SlotTestsClassA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!slot1: anObject	slot1:= anObject.! !Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34331662!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34332021!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34333446!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34333762!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34333945!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34334506!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34334641!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34334985!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34335339!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34335664!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34336035!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34336794!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!Object subclass: #'ConfigurationOfDummyConfiguration'	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfDummyConfiguration'!!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34341732!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34342091!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:39'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34343516!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34343832!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34344015!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34344576!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34344711!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34345055!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34345409!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34345734!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34346105!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34346864!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !Smalltalk globals removeClassNamed: #ConfigurationOfDummyConfiguration!!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!otherField	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!otherField: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField put: anObject! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!oneByte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!oneByte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!long	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!long: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!short	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!short: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!float	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!float: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!int64	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!int64: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64 put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!double	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!double: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!byte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!byte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte put: anObject! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!addr	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!addr: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1 put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!addr1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!addr1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!addr2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!addr2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2 put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!struct	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!struct: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!union	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!union: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:39'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34370158!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!foo ^true! !!Trait method!foo ^true! !!Trait method!foo ^true! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^self! !!Trait method!m51 ^self! !!Trait method!m51 ^self! !!Trait method!m51 ^self! !!Trait method!m51 ^self! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34373337!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!C2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34374482!m51 ^123! !!Trait method!m51 ^super foo! !!Trait method!m11 ^11! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34376304!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34379107!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34381910!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34384681!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^true! !!Trait method!m ^true! !!Trait method!m ^true! !!Trait method!m ^true! !!Trait method!m ^true! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!Trait method!m self explicitRequirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34388355!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!C9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^100! !!TTempTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement.! !!Trait method!m ^self explicitRequirement.! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34391377!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T11 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement! !!Trait method!m ^self explicitRequirement! !!T9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^2! !!Trait method!m ^2! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34394475!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!C10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^111! !!C11 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34397443!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T12 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^11! !!Trait method!m ^11! !!Trait method!m ^11! !!T11 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34399520!m ^self explicitRequirement! !!Trait method!m ^self explicitRequirement! !!C10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^111! !!C11 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34399693!m ^self explicitRequirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34400797!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement! !!Trait method!m ^self explicitRequirement! !!C9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^123! !!C9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^123! !!T10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement! !!Trait method!m ^self explicitRequirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34404052!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement! !!Trait method!m ^self explicitRequirement! !!T11 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^self explicitRequirement! !!Trait method!m ^self explicitRequirement! !!T9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^2! !!Trait method!m ^2! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34407305!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m1 ^self explicitRequirement! !!Trait method!m1 ^self explicitRequirement! !!T10 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2 self explicitRequirement! !!Trait method!m2 self explicitRequirement! !!T9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m1 ^2! !!Trait method!m1 ^2! !!T9 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2 ^2! !!Trait method!m2 ^2! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34410608!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34413443!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m1 self foo bar! !!Trait method!m1 self foo bar! !!Trait method!m1 self foo bar! !!Trait method!m1 self foo bar! !!Trait method!m1 self foo bar! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2 self requirement! !!Trait method!m2 self requirement! !!Trait method!m2 self requirement! !!Trait method!m2 self requirement! !!Trait method!m2 self requirement! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m3 ^self requirement! !!Trait method!m3 ^self requirement! !!Trait method!m3 ^self requirement! !!Trait method!m3 ^self requirement! !!Trait method!m3 ^self requirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34416955!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!TTT1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^ 4! !!Trait method!foo ^ 4! !!Trait method!foo ^ 4! !!Trait method!foo ^ 4! !!Trait method!foo ^ 4! !!Trait method!foo ^ 4! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34420010!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!TTT1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^ self explicitRequirement! !!Trait method!foo ^ self explicitRequirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34422975!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34425778!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34428581!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!ATraitForTests methodsFor: 'test' stamp: 'MarcinKopacz 12/5/2015 19:39'!m1 ^1! !!Trait method!m1 ^1! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34431491!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m ^true! !!Trait method!m ^true! !!Trait method!m ^true! !!Trait method!m ^true! !!Trait method!m ^true! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!Trait method!m self requirement! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34435029!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!method ^1234! !!Trait method!method ^1234! !!Trait method!method ^1234! !!Trait method!method ^1234! !!Trait method!method ^1234! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!method ^4! !!Trait method!method	self traitConflict! !!Trait method!method	self traitConflict! !!Trait method!method	self traitConflict! !!Trait method!method	self traitConflict! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m11 ^11! !!Trait method!m2ClassSide: a ^a! !!Trait method!method ^1234! !!Trait method!method ^4! !!Trait method!method ^4! !!Trait method!method ^4! !!Trait method!method ^4! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34438634!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!ATraitForTests methodsFor: 'test' stamp: 'MarcinKopacz 12/5/2015 19:39'!m1 ^1! !!Trait method!m1 ^1! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34441512!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34444347!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34447150!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m22 ^22! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:39'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:39'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:39' prior: 34450125!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:39'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:39'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:39'!bar ^self blah! !!Trait method!m11 ^11! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!TestWithAccessors methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:39'!methodToDelegate	2+5. 	OrderedCollection new.! !!TestWithAccessors methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:39'!methodToDelegate	2+5. 	OrderedCollection new.! !!ClassForTestToBeDeleted106 methodsFor: ''!cache ^cache! !!ClassForTestToBeDeleted106 methodsFor: ''!cache: x cache := x! !!ClassForTestToBeDeleted106 methodsFor: ''!			fuelAccept: aVisitor  				^cache 					ifNil: [ super fuelAccept: aVisitor ]					ifNotNil: [ aVisitor visitSubstitution: self by: (self copy cache: nil)]! !!ClassForTestToBeDeleted107 methodsFor: ''!initialize  someState := 5@1! !!ClassForTestToBeDeleted107 methodsFor: ''!fuelAccept: aVisitor  ^aVisitor visitSubstitution: self by: (FLProxyThatBecomesItsContent newWith: someState)! !!ClassForTestToBeDeleted108 methodsFor: ''!target: x  target := x! !!ClassForTestToBeDeleted108 methodsFor: ''!fuelAccept: aVisitor  ^aVisitor visitSubstitution: self by: target! !!ClassForTestToBeDeleted109 methodsFor: ''!target: x  target := x! !!ClassForTestToBeDeleted109 methodsFor: ''!fuelAccept: aVisitor  ^aVisitor visitSubstitution: self by: target! !!ClassForTestToBeDeleted110 methodsFor: ''!target: x  target := x! !!ClassForTestToBeDeleted110 methodsFor: ''!fuelAccept: aVisitor  ^aVisitor visitSubstitution: self by: target! !!ClassForTestToBeDeleted111 methodsFor: ''!target: x  target := x! !!ClassForTestToBeDeleted111 methodsFor: ''!fuelAccept: aVisitor  ^aVisitor visitSubstitution: self by: target! !!ClassForTestToBeDeleted112 methodsFor: ''!fuelAccept: aMapper  			^aMapper 				visitSubstitution: self by: self 				onRecursionDo: [super fuelAccept: aMapper]! !!ClassForTestToBeDeleted113 methodsFor: ''!fuelAccept: aVisitor  ^aVisitor visitSubstitution: self by: nil! !!MCMockClassC commentStamp: 'tester-MCMockClassC 1/1/2000 00:00' prior: 0!This is a comment for MCMockClassC!!MCMockClassC commentStamp: 'tester-MCMockClassC 1/1/2000 00:00' prior: 0!This is a comment for MCMockClassC!!Trait method!c	^ 'Trait1>>c'! !!Trait method!c1	^ 'Trait1>>c1'! !!MCMockClassC commentStamp: 'tester-MCMockClassC 1/1/2000 00:00' prior: 0!This is a comment for MCMockClassC!!Trait method!c	^ 'Trait1>>c'! !!Trait method!c1	^ 'Trait1>>c1'! !!MCMockClassC commentStamp: 'tester-MCMockClassC 1/1/2000 00:00' prior: 0!This is a comment for MCMockClassC!!Trait method!c2	^ 'Trait2>>c2'! !!Trait method!c	self traitConflict! !!Trait method!c1	^ 'Trait1>>c1'! !!MCMockClassC commentStamp: 'tester-MCMockClassC 1/1/2000 00:00' prior: 0!This is a comment for MCMockClassC!!Trait method!c	^ 'Trait1>>c'! !!ClassForTestToBeDeleted114 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!aMethodWithSenders ^ self! !!ClassForTestToBeDeleted114 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethod ^self aMethodWithSenders! !!ClassForTestToBeDeleted115 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!yetAnotherMethod ^self aMethodWithSenders! !!ClassForTestToBeDeleted117 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted118 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted123 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted125 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted119 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted135 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted129 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted128 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted130 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted134 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth self MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined! !!ClassForTestToBeDeleted136 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted138 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted142 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted143 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted137 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!meth ^#(a b MessageSentOnlyByTestClassesXXXShouldNotBeRealyDefined c)! !!ClassForTestToBeDeleted146 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!messageNeverSentInTheSystemXXXXThisIsForTest ^self! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 28521091!override ^ 1! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34458327!override ^ 1! !!MCMockClassA methodsFor: 'as yet unclassified' stamp: '' prior: 34287432!one ^2! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22'!one	^ 1! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34458442!override ^ 1! !!MCMethodDefinitionTest methodsFor: '*foobarbaz' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34458732!override ^ 2! !!MCMethodDefinitionTest methodsFor: '*MonticelloMocks-override' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34458852!override ^ 3! !!MCMethodDefinitionTest methodsFor: '*MonticelloMocks-override' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34458987!override ^ 4! !!MCMethodDefinitionTest methodsFor: '*foobarbaz' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34459122!override ^ 2! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34459242!override ^ 1! !"Monticello"!!Object methodsFor: '*MonticelloMocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 33457947!yourself ^ self! !!Object methodsFor: 'accessing' stamp: 'md 5/16/2006 12:34' prior: 34459482!yourself	"Answer self."	^self! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34459357!override ^ 1! !!MCMethodDefinitionTest methodsFor: '*MonticelloMocks-override' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34459712!override ^ 2! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34459847!override ^ 1! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34459962!override ^ 1! !"Monticello"!!FuelPostMaterializationTestClassToBeDeleted class methodsFor: ''!postLoadMethod  TestClassVariable := 1! !!FuelPostMaterializationTestClassToBeDeleted class methodsFor: ''!postLoadMethod2  TestClassVariable := 2! !!FuelPostMaterializationTestClassToBeDeleted class methodsFor: ''!classVariable  ^TestClassVariable ! !!FuelPreMaterializationTestClassToBeDeleted class methodsFor: ''!postLoadMethod  TestClassVariable := 1! !!FuelPreMaterializationTestClassToBeDeleted class methodsFor: ''!postLoadMethod2  TestClassVariable := 2! !!FuelPreMaterializationTestClassToBeDeleted class methodsFor: ''!classVariable  ^TestClassVariable ! !!TestWithAccessors methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodToDelegate	2+5. 	OrderedCollection new.! !!TestWithAccessors methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodToDelegate	2+5. 	OrderedCollection new.! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!zork ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:40'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!ClassInYPackage methodsFor: '*XXXXX' stamp: 'MarcinKopacz 12/5/2015 19:40'!extensionFromXInClassInY ^nil! !!ClassInYPackage methodsFor: '*XXXXX-subcategory' stamp: 'MarcinKopacz 12/5/2015 19:40'!longNameExtensionFromXInClassInY ^nil! !!ClassInZPackage methodsFor: '*XXXXX' stamp: 'MarcinKopacz 12/5/2015 19:40'!extensionFromXInClassInZ ^nil! !!ClassForTestToBeDeleted170 class methodsFor: ''!fuelIgnoredInstanceVariableNames ^#(a b)! !!ClassForTestToBeDeleted171 class methodsFor: ''!fuelIgnoredInstanceVariableNames ^#(a)! !!ClassForTestToBeDeleted172 class methodsFor: ''!fuelIgnoredInstanceVariableNames ^#(b)! !!ClassForTestToBeDeleted173 class methodsFor: ''!fuelIgnoredInstanceVariableNames ^#(a c)! !!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34286936!a ^ 'a2'! !!RGMethodDefinitionTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 53469166!foo	^ 'first version'! !!RGMethodDefinitionTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34467839!foo	^ 'second version'! !!RGMethodDefinitionTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34467977!foo	^ 'first version'! !!RGMethodDefinitionTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34468116!foo	^ 'second version'! !!RGMethodDefinitionTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34468254!foo	^ 'first version'! !!RGMethodDefinitionTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34468393!foo	^ 'second version'! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!simulateKeyStrokes: aString 	ActiveHand simulateKeyStrokes: aString.! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!simulateKeyStroke: aCharacterOrShortcut	ActiveHand simulateKeyStroke: aCharacterOrShortcut.! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!run: aResult	aResult runCase: self! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!failureLog		^Transcript			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!isLogging	"By default, we're not logging failures. If you override this in 	a subclass, make sure that you override #failureLog"	^false			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!runCaseAsFailure: aSemaphore	[self resources do: [:each | each availableFor: self].	[self setUp.	self openDebuggerOnFailingTestMethod] ensure: [self tearDown]]		ensure: [aSemaphore signal]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!openDebuggerOnFailingTestMethod	"SUnit has halted one step in front of the failing test method. Step over the 'self halt' and 	 send into 'self perform: testSelector' to see the failure from the beginning"	self		halt;		performTest! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!run	| result |	result := self classForTestResult new.	[ self run: result ]		ensure: [ self classForTestResource resetResources: self resources ].	^ result! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!setUp! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!debugAsFailure	| semaphore |	semaphore := Semaphore new.	[ 	semaphore wait.	self classForTestResource resetResources: self resources ] fork.	(self class selector: testSelector) runCaseAsFailure: semaphore! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!logFailure: aString	self isLogging ifTrue: [		self failureLog 			cr; 			nextPutAll: aString; 			flush]			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!prepareToRunAgain 		"Used by the debugger when a test is restarted	I'm not 'hidding'' possible exceptions because I think it is best to popup a new debugger	if some one occurs and let the programmer decide what to do - Hernan"	self 		tearDown;		setUp! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!tearDown	! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!debug	[ (self class selector: testSelector) runCase ]		ensure: [ self classForTestResource resetResources: self resources ]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!runCase	self resources do: [:each | each availableFor: self].	[self setUp.	self performTest] ensure: [		self tearDown.		self cleanUpInstanceVariables]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!removeDependentFromHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!addDependentToHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!announce: anAnnouncementClass withResult: result	| event |	self shouldAnnounce ifFalse: [ ^ self ].		event := anAnnouncementClass asAnnouncement.	event testCase: self.	event testSelector: testSelector.	event testResult: result.	self announcer announce: event.! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!announce: anAnnouncementClass	^ self announce: anAnnouncementClass with: nil! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!shouldAnnounce	^ self class shouldAnnounce! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!announcer	^ self class announcer! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!expectedFailures	| pragmas |	^ expectedFails ifNil: [				pragmas := Pragma allNamed: #expectedFailure from: self class to: TestCase.		expectedFails := pragmas collect: [:each | each method selector  ].	]	! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!shouldPass	^self isExpectedFailure not! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!isExpectedFailure	^self expectedFailures includes: testSelector! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!selector	^testSelector! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!resources	"We give TestCase this instance-side method so that methods polymorphic with TestSuite can be code-identical.  Having this instance-side method also helps when writing tests of resource behaviour. Except for such tests, it is rare to override this method and should not be done without thought.  If there were a good reason why a single test case needed to share tests requiring different resources, it might be legitimate."	^self class resources! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!printTestSelectorOn: aStream	testSelector		ifNotNil: [ 			| class |			class := self class whichClassIncludesSelector: testSelector.			class ~= self class				ifTrue: [ self printTestSelectorDefiningClass: class on: aStream ].			aStream				nextPutAll: '>>#';				nextPutAll: testSelector ]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!printOn: aStream	aStream nextPutAll: self class printString.	self printTestSelectorOn: aStream! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!printTestSelectorDefiningClass: aClass on: aStream	aStream << '('.	aClass printOn: aStream.	aStream << ')'! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!performTest	self perform: testSelector asSymbol! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!executeShould: aBlock inScopeOf: anExceptionalEvent withDescriptionContaining: aString	^[aBlock value. 	false] on: anExceptionalEvent		do: [:ex | ex return: (ex description includesSubstring: aString) ]			! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!cleanUpInstanceVariables	self class allInstVarNames do: [ :name |		name = 'testSelector' ifFalse: [			self instVarNamed: name put: nil ] ]! !!MyTestClass methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!setTestSelector: aSymbol	testSelector := aSymbol! !!MyTestClass methodsFor: '*SUnit-UITesting' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34468633!simulateKeyStrokes: aString 	ActiveHand simulateKeyStrokes: aString.! !!MyTestClass methodsFor: '*SUnit-UITesting' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34468783!simulateKeyStroke: aCharacterOrShortcut	ActiveHand simulateKeyStroke: aCharacterOrShortcut.! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34468956!run: aResult	aResult runCase: self! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34469071!failureLog		^Transcript			! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34469180!isLogging	"By default, we're not logging failures. If you override this in 	a subclass, make sure that you override #failureLog"	^false			! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34469402!runCaseAsFailure: aSemaphore	[self resources do: [:each | each availableFor: self].	[self setUp.	self openDebuggerOnFailingTestMethod] ensure: [self tearDown]]		ensure: [aSemaphore signal]! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34469674!openDebuggerOnFailingTestMethod	"SUnit has halted one step in front of the failing test method. Step over the 'self halt' and 	 send into 'self perform: testSelector' to see the failure from the beginning"	self		halt;		performTest! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34469990!run	| result |	result := self classForTestResult new.	[ self run: result ]		ensure: [ self classForTestResource resetResources: self resources ].	^ result! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34470229!setUp! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34470314!debugAsFailure	| semaphore |	semaphore := Semaphore new.	[ 	semaphore wait.	self classForTestResource resetResources: self resources ] fork.	(self class selector: testSelector) runCaseAsFailure: semaphore! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34470604!logFailure: aString	self isLogging ifTrue: [		self failureLog 			cr; 			nextPutAll: aString; 			flush]			! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34470795!prepareToRunAgain 		"Used by the debugger when a test is restarted	I'm not 'hidding'' possible exceptions because I think it is best to popup a new debugger	if some one occurs and let the programmer decide what to do - Hernan"	self 		tearDown;		setUp! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34471132!tearDown	! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34471223!debug	[ (self class selector: testSelector) runCase ]		ensure: [ self classForTestResource resetResources: self resources ]! !!MyTestClass methodsFor: 'running' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34471428!runCase	self resources do: [:each | each availableFor: self].	[self setUp.	self performTest] ensure: [		self tearDown.		self cleanUpInstanceVariables]! !!MyTestClass methodsFor: 'dependencies' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34471663!removeDependentFromHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: 'dependencies' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34471842!addDependentToHierachy: anObject 	"an empty method. for Composite compability with TestSuite"! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34472016!announce: anAnnouncementClass withResult: result	| event |	self shouldAnnounce ifFalse: [ ^ self ].		event := anAnnouncementClass asAnnouncement.	event testCase: self.	event testSelector: testSelector.	event testResult: result.	self announcer announce: event.! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34472363!announce: anAnnouncementClass	^ self announce: anAnnouncementClass with: nil! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34472520!shouldAnnounce	^ self class shouldAnnounce! !!MyTestClass methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34472643!announcer	^ self class announcer! !!MyTestClass methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34472756!expectedFailures	| pragmas |	^ expectedFails ifNil: [				pragmas := Pragma allNamed: #expectedFailure from: self class to: TestCase.		expectedFails := pragmas collect: [:each | each method selector  ].	]	! !!MyTestClass methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34473047!shouldPass	^self isExpectedFailure not! !!MyTestClass methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34473166!isExpectedFailure	^self expectedFailures includes: testSelector! !!MyTestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34473310!selector	^testSelector! !!MyTestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34473413!resources	"We give TestCase this instance-side method so that methods polymorphic with TestSuite can be code-identical.  Having this instance-side method also helps when writing tests of resource behaviour. Except for such tests, it is rare to override this method and should not be done without thought.  If there were a good reason why a single test case needed to share tests requiring different resources, it might be legitimate."	^self class resources! !!MyTestClass methodsFor: 'printing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34473952!printTestSelectorOn: aStream	testSelector		ifNotNil: [ 			| class |			class := self class whichClassIncludesSelector: testSelector.			class ~= self class				ifTrue: [ self printTestSelectorDefiningClass: class on: aStream ].			aStream				nextPutAll: '>>#';				nextPutAll: testSelector ]! !!MyTestClass methodsFor: 'printing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34474327!printOn: aStream	aStream nextPutAll: self class printString.	self printTestSelectorOn: aStream! !!MyTestClass methodsFor: 'printing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34474503!printTestSelectorDefiningClass: aClass on: aStream	aStream << '('.	aClass printOn: aStream.	aStream << ')'! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34474692!performTest	self perform: testSelector asSymbol! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34474820!executeShould: aBlock inScopeOf: anExceptionalEvent withDescriptionContaining: aString	^[aBlock value. 	false] on: anExceptionalEvent		do: [:ex | ex return: (ex description includesSubstring: aString) ]			! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34475109!cleanUpInstanceVariables	self class allInstVarNames do: [ :name |		name = 'testSelector' ifFalse: [			self instVarNamed: name put: nil ] ]! !!MyTestClass methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34475330!setTestSelector: aSymbol	testSelector := aSymbol! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!correspondingClass	(self name endsWith: 'Test' ) ifFalse: [^nil].	^Smalltalk globals 		at: (self name allButLast: 4) asSymbol		ifAbsent: [nil]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!hasPassedTest	^ (self history at: #passed) isEmpty not ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!hasErrorTest	^ (self history at: #errors) isEmpty not ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!hasFailedTest	^ (self history at: #failures) isEmpty not ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!coverageForClass: cls	"returns the test coverage of all the methods included inherited ones"	^ self coverageForClass: cls until: ProtoObject! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!coverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set."	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #coverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #coverageForClass: instead' ].	"May happen with Transcript"	cls isBehavior		ifFalse: [ cls := cls class ].	^ self coverageForClass: cls! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!coverageForClass: cls until: aRootClass	"returns the test coverage of all the methods included inherited ones but stopping at aRootClass included"		| definedMethods testedMethods untestedMethods |	definedMethods := cls allSelectorsAboveUntil: aRootClass.	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!localCoverageForClass: cls		| definedMethods testedMethods untestedMethods |	definedMethods := cls selectors.	"It happens for IdentityBag / IdentityBagTest"	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].						"testedMethods contains all the methods send in test methods, which probably contains methods that have nothign to do with collection"	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!localCoverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set. The computation of the coverage takes only into	account the methods defined locally in the tested class. See coverage for a more global 	coverage"	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #localCoverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #localCoverageForClass: instead' ].	cls isBehavior		ifFalse: [ cls := cls class ].	^ self localCoverageForClass: cls! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!coveragePercentage	^ self coverage first! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!localCoveragePercentage	^ self localCoverage first! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!localCoverageAsString	| cov className |	cov := self localCoverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!coverageAsString	| cov className |	cov := self coverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!announcers	^ Announcers ifNil: [ Announcers := Dictionary new ] ! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!shouldAnnounce	^ self announcers includesKey: self! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!announcer 	^ self announcers at: self ifAbsentPut: [ Announcer new ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!resetAnnouncer	self announcers removeKey: self ifAbsent: []! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!allTestSelectors	| answer pivotClass lookupRoot |	answer := Set withAll: self testSelectors.	self shouldInheritSelectors		ifTrue:			[pivotClass := self.			lookupRoot := self lookupHierarchyRoot.			[pivotClass == lookupRoot]				whileFalse:					[pivotClass := pivotClass superclass.					answer addAll: pivotClass testSelectors]].	^answer asSortedCollection asOrderedCollection! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!lookupHierarchyRoot	^TestCase! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!testSelectors	^(self selectors select: [ :each | (each beginsWith: 'test') and: [each numArgs isZero]])! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!resources	^#()! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!historyAnnouncer	^ HistoryAnnouncer ifNil: [  HistoryAnnouncer := Announcer new ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!sunitVersion	^'4.0'! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!run: aSymbol	^(self selector: aSymbol) run! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!selector: aSymbol	^self new setTestSelector: aSymbol! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!debug: aSymbol	^(self selector: aSymbol) debug! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!suite	^self buildSuite! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!initialize	super initialize.	SystemAnnouncer uniqueInstance unsubscribe: self.	SystemAnnouncer uniqueInstance weak		when: MethodAdded, MethodModified, MethodRemoved 		send: #methodChanged: 		to: self.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodChanged: anEvent	"Remove the changed method from the known test results."		| cls sel |	cls := anEvent methodClass.	(cls inheritsFrom: TestCase)		ifFalse: [^ self].	sel := anEvent selector.	(sel beginsWith: 'test')		ifFalse: [^ self].	self classForTestResult removeFromTestHistory: sel in: cls.! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!addTestsFor: classNameString toSuite: suite	| cls |	cls := Smalltalk globals at: classNameString ifAbsent: [ ^ suite ].	^ cls isAbstract		ifTrue: [ 			cls allSubclasses				do: [ :each | 					each isAbstract						ifFalse: [ each addToSuiteFromSelectors: suite ] ].			suite ]		ifFalse: [ cls addToSuiteFromSelectors: suite ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!addToSuite: suite fromMethods: testMethods 	testMethods do:  [ :selector | 			suite addTest: (self selector: selector) ].	^suite! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!addToSuiteFromSelectors: suite	^self addToSuite: suite fromMethods: (self shouldInheritSelectors		ifTrue: [ self allTestSelectors ]		ifFalse: [self testSelectors ])! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!buildSuite	| suite |	^self isAbstract		ifTrue: 			[suite := self suiteClass named: self name asString.			self allSubclasses 				do: [:each | each isAbstract ifFalse: [suite addTest: each buildSuiteFromSelectors]].			suite]		ifFalse: [self buildSuiteFromSelectors]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!buildSuiteFromLocalSelectors	^self buildSuiteFromMethods: self testSelectors			! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!buildSuiteFromSelectors	^self buildSuiteFromMethods: self allTestSelectors! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!buildSuiteFromAllSelectors	^self buildSuiteFromMethods: self allTestSelectors			! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!buildSuiteFromMethods: testMethods	^testMethods		inject: (self suiteClass named: self name asString)		into: [:suite :selector |			suite				addTest: (self selector: selector);				yourself]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!resetHistory	history := nil! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!history	^ history ifNil: [ history := self newTestDictionary ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!generateLastStoredRunMethod	self shouldGenerateLastStoredRunMethod ifTrue: [		self class			compile: (self lastRunMethodNamed: #lastStoredRun)			classified: 'history' ]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!newTestDictionary	^ Dictionary new at: #timeStamp put: DateAndTime now;		at: #passed put: Set new;		at: #failures put: Set new;		at: #errors put: Set new;		yourself		! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!history: aDictionary	history := aDictionary.	self historyAnnouncer announce: (TestSuiteEnded result: self)! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!lastRun	^ self classForTestResult historyFor: self! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!lastRunMethodNamed: aSelector		^ String streamContents: [:str |		str nextPutAll: aSelector asString ;cr.		str tab; nextPutAll: '^ ', (self lastRun) storeString]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!lastStoredRun	^ ((Dictionary new) add: (#failures->#()); add: (#passed->#()); add: (#errors->#()); yourself)! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!shouldGenerateLastStoredRunMethod	| sameRun |		(self class includesSelector: #lastStoredRun)		ifFalse: [^ true].	sameRun := #(#passed #failures #errors) inject: true into: 		[ :ok :set | ok and: [(self lastRun at: set) = (self lastStoredRun at: set) ]].	^ sameRun not! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!isUnitTest	^true! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #TestCase			! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!storedMethodPassed: aSelector	^ (self lastStoredRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!shouldInheritSelectors	"I should inherit from an Abstract superclass but not from a concrete one by default, unless I have no testSelectors in which case I must be expecting to inherit them from my superclass.  If a test case with selectors wants to inherit selectors from a concrete superclass, override this to true in that subclass."		^self ~~ self lookupHierarchyRoot		and: [self superclass isAbstract or: [self testSelectors isEmpty]]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!storedMethodRaisedError: aSelector	^ (self lastStoredRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodPassed: aSelector	^ (self lastRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodProgressed: aSelector	^ ((self storedMethodRaisedError: aSelector) or: [self storedMethodFailed: aSelector])		and: [self methodPassed: aSelector]		! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodRegressed: aSelector	^ (self storedMethodPassed: aSelector) and: [(self methodFailed: aSelector) or: [self methodRaisedError: aSelector]]! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!storedMethodFailed: aSelector	^ (self lastStoredRun at: #failures) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!isTestCase	^ true! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodRaisedError: aSelector	^ (self lastRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!hasMethodBeenRun: aSelector	^ ((self lastRun at: #errors),		(self lastRun at: #failures),		(self lastRun at: #passed))			includes: aSelector! !!MyTestClass class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:40'!methodFailed: aSelector	^ (self lastRun at: #failures) includes: aSelector! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34482784!correspondingClass	(self name endsWith: 'Test' ) ifFalse: [^nil].	^Smalltalk globals 		at: (self name allButLast: 4) asSymbol		ifAbsent: [nil]! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34483017!hasPassedTest	^ (self history at: #passed) isEmpty not ! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34483160!hasErrorTest	^ (self history at: #errors) isEmpty not ! !!MyTestClass class methodsFor: '*NautilusCommon' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34483302!hasFailedTest	^ (self history at: #failures) isEmpty not ! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34483447!coverageForClass: cls	"returns the test coverage of all the methods included inherited ones"	^ self coverageForClass: cls until: ProtoObject! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34483675!coverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set."	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #coverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #coverageForClass: instead' ].	"May happen with Transcript"	cls isBehavior		ifFalse: [ cls := cls class ].	^ self coverageForClass: cls! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34484379!coverageForClass: cls until: aRootClass	"returns the test coverage of all the methods included inherited ones but stopping at aRootClass included"		| definedMethods testedMethods untestedMethods |	definedMethods := cls allSelectorsAboveUntil: aRootClass.	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34485143!localCoverageForClass: cls		| definedMethods testedMethods untestedMethods |	definedMethods := cls selectors.	"It happens for IdentityBag / IdentityBagTest"	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methods inject: Set new into: 							[:sums :cm | sums union: cm messages].						"testedMethods contains all the methods send in test methods, which probably contains methods that have nothign to do with collection"	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34485954!localCoverage	"returns the coverage determined by a simple static analysis of test coverage 	made by the receiver on a class that is identified by the name of the receiver.	We assume that SetTest test Set. The computation of the coverage takes only into	account the methods defined locally in the tested class. See coverage for a more global 	coverage"	| cls className |	(self name endsWith: 'Test')		ifFalse: [ self error: 'Please, use #localCoverageForClass: instead' ].	className := self name copyFrom: 1 to: self name size - 'Test' size.	cls := Smalltalk globals at: className asSymbol ifAbsent: [ self error: 'Please, use #localCoverageForClass: instead' ].	cls isBehavior		ifFalse: [ cls := cls class ].	^ self localCoverageForClass: cls! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34486797!coveragePercentage	^ self coverage first! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34486924!localCoveragePercentage	^ self localCoverage first! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34487061!localCoverageAsString	| cov className |	cov := self localCoverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: 'coverage' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34487467!coverageAsString	| cov className |	cov := self coverage first asInteger. 	"coverage already checks that the name is ends with 'Test' and if the class tested exists"		className := self name copyFrom: 1 to: (self name size - 'Test' size).	^ self name asString, ' covers ', cov asString, '% of ', className.! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34487863!announcers	^ Announcers ifNil: [ Announcers := Dictionary new ] ! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34488014!shouldAnnounce	^ self announcers includesKey: self! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34488151!announcer 	^ self announcers at: self ifAbsentPut: [ Announcer new ]! !!MyTestClass class methodsFor: 'events' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34488306!resetAnnouncer	self announcers removeKey: self ifAbsent: []! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34488452!allTestSelectors	| answer pivotClass lookupRoot |	answer := Set withAll: self testSelectors.	self shouldInheritSelectors		ifTrue:			[pivotClass := self.			lookupRoot := self lookupHierarchyRoot.			[pivotClass == lookupRoot]				whileFalse:					[pivotClass := pivotClass superclass.					answer addAll: pivotClass testSelectors]].	^answer asSortedCollection asOrderedCollection! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34488923!lookupHierarchyRoot	^TestCase! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489039!testSelectors	^(self selectors select: [ :each | (each beginsWith: 'test') and: [each numArgs isZero]])! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489229!resources	^#()! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489331!historyAnnouncer	^ HistoryAnnouncer ifNil: [  HistoryAnnouncer := Announcer new ]! !!MyTestClass class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489499!sunitVersion	^'4.0'! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489605!run: aSymbol	^(self selector: aSymbol) run! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489735!selector: aSymbol	^self new setTestSelector: aSymbol! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34489875!debug: aSymbol	^(self selector: aSymbol) debug! !!MyTestClass class methodsFor: 'instance creation' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34490009!suite	^self buildSuite! !!MyTestClass class methodsFor: 'initialize - event' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34490119!initialize	super initialize.	SystemAnnouncer uniqueInstance unsubscribe: self.	SystemAnnouncer uniqueInstance weak		when: MethodAdded, MethodModified, MethodRemoved 		send: #methodChanged: 		to: self.! !!MyTestClass class methodsFor: 'initialize - event' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34490411!methodChanged: anEvent	"Remove the changed method from the known test results."		| cls sel |	cls := anEvent methodClass.	(cls inheritsFrom: TestCase)		ifFalse: [^ self].	sel := anEvent selector.	(sel beginsWith: 'test')		ifFalse: [^ self].	self classForTestResult removeFromTestHistory: sel in: cls.! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34490807!addTestsFor: classNameString toSuite: suite	| cls |	cls := Smalltalk globals at: classNameString ifAbsent: [ ^ suite ].	^ cls isAbstract		ifTrue: [ 			cls allSubclasses				do: [ :each | 					each isAbstract						ifFalse: [ each addToSuiteFromSelectors: suite ] ].			suite ]		ifFalse: [ cls addToSuiteFromSelectors: suite ]! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34491225!addToSuite: suite fromMethods: testMethods 	testMethods do:  [ :selector | 			suite addTest: (self selector: selector) ].	^suite! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34491442!addToSuiteFromSelectors: suite	^self addToSuite: suite fromMethods: (self shouldInheritSelectors		ifTrue: [ self allTestSelectors ]		ifFalse: [self testSelectors ])! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34491695!buildSuite	| suite |	^self isAbstract		ifTrue: 			[suite := self suiteClass named: self name asString.			self allSubclasses 				do: [:each | each isAbstract ifFalse: [suite addTest: each buildSuiteFromSelectors]].			suite]		ifFalse: [self buildSuiteFromSelectors]! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34492052!buildSuiteFromLocalSelectors	^self buildSuiteFromMethods: self testSelectors			! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34492220!buildSuiteFromSelectors	^self buildSuiteFromMethods: self allTestSelectors! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34492381!buildSuiteFromAllSelectors	^self buildSuiteFromMethods: self allTestSelectors			! !!MyTestClass class methodsFor: 'building suites' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34492550!buildSuiteFromMethods: testMethods	^testMethods		inject: (self suiteClass named: self name asString)		into: [:suite :selector |			suite				addTest: (self selector: selector);				yourself]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34492830!resetHistory	history := nil! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34492944!history	^ history ifNil: [ history := self newTestDictionary ]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34493093!generateLastStoredRunMethod	self shouldGenerateLastStoredRunMethod ifTrue: [		self class			compile: (self lastRunMethodNamed: #lastStoredRun)			classified: 'history' ]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34493351!newTestDictionary	^ Dictionary new at: #timeStamp put: DateAndTime now;		at: #passed put: Set new;		at: #failures put: Set new;		at: #errors put: Set new;		yourself		! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34493610!history: aDictionary	history := aDictionary.	self historyAnnouncer announce: (TestSuiteEnded result: self)! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34493805!lastRun	^ self classForTestResult historyFor: self! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34493942!lastRunMethodNamed: aSelector		^ String streamContents: [:str |		str nextPutAll: aSelector asString ;cr.		str tab; nextPutAll: '^ ', (self lastRun) storeString]! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34494193!lastStoredRun	^ ((Dictionary new) add: (#failures->#()); add: (#passed->#()); add: (#errors->#()); yourself)! !!MyTestClass class methodsFor: 'history' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34494388!shouldGenerateLastStoredRunMethod	| sameRun |		(self class includesSelector: #lastStoredRun)		ifFalse: [^ true].	sameRun := #(#passed #failures #errors) inject: true into: 		[ :ok :set | ok and: [(self lastRun at: set) = (self lastStoredRun at: set) ]].	^ sameRun not! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34494749!isUnitTest	^true! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34494852!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #TestCase			! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34495086!storedMethodPassed: aSelector	^ (self lastStoredRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34495257!shouldInheritSelectors	"I should inherit from an Abstract superclass but not from a concrete one by default, unless I have no testSelectors in which case I must be expecting to inherit them from my superclass.  If a test case with selectors wants to inherit selectors from a concrete superclass, override this to true in that subclass."		^self ~~ self lookupHierarchyRoot		and: [self superclass isAbstract or: [self testSelectors isEmpty]]! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34495786!storedMethodRaisedError: aSelector	^ (self lastStoredRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34495962!methodPassed: aSelector	^ (self lastRun at: #passed) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34496121!methodProgressed: aSelector	^ ((self storedMethodRaisedError: aSelector) or: [self storedMethodFailed: aSelector])		and: [self methodPassed: aSelector]		! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34496363!methodRegressed: aSelector	^ (self storedMethodPassed: aSelector) and: [(self methodFailed: aSelector) or: [self methodRaisedError: aSelector]]! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34496593!storedMethodFailed: aSelector	^ (self lastStoredRun at: #failures) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34496766!isTestCase	^ true! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34496870!methodRaisedError: aSelector	^ (self lastRun at: #errors) includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34497034!hasMethodBeenRun: aSelector	^ ((self lastRun at: #errors),		(self lastRun at: #failures),		(self lastRun at: #passed))			includes: aSelector! !!MyTestClass class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34497264!methodFailed: aSelector	^ (self lastRun at: #failures) includes: aSelector! !!TestWithAccessors methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test	^ test! !!TestWithAccessors methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test: anObject	test := anObject! !!TestWithAccessors methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test: anObject	test := anObject! !!TestWithAccessors methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test	^ test! !!TestWithAccessors class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test	^ Test! !!TestWithAccessors class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test: anObject	Test := anObject! !!TestWithAccessors class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test: anObject	Test := anObject! !!TestWithAccessors class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!test	^ Test! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock class methodsFor: 'utilities' stamp: 'MarcinKopacz 12/5/2015 19:40'!method ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'utilities' stamp: 'MarcinKopacz 12/5/2015 19:40'!method ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'utilities' stamp: 'MarcinKopacz 12/5/2015 19:40'!method ^1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock commentStamp: 'MarcinKopacz 12/5/2015 19:40' prior: 0!Some Comment!!RBRefactoringChangeMock commentStamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34516739!!!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34517029!one ^ 2! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34517144!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!method1 ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!method2 ^ 2! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!RBRefactoringChangeMock methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:40'!one ^ 1! !!ClassForTestToBeDeleted204 methodsFor: ''!methodWithClosure  ^ [ 42 ]! !!ClassForTestToBeDeleted204 methodsFor: '' prior: 34519104!methodWithClosure  ^ 42! !!ClassForTestToBeDeleted205 methodsFor: ''!methodWithClosure  ^ [ 41 ]! !!ClassForTestToBeDeleted205 methodsFor: '' prior: 34519266!methodWithClosure  ^ [ 42 ]! !!ClassForTestToBeDeleted206 methodsFor: ''!methodWithClosure  ^ [ 42 ]! !!ConfigurationOfMBBranchTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBBranchTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!symbolicVersionStable10MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !"ConfigurationOfMBBranchTests"!"MBFooTests"!!ConfigurationOfMBBranchTests class methodsFor: 'cat'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMBBranchTests class methodsFor: 'cat'!project	^self new project! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!baseline10MBFooTest: spec 	"self reset"	<version: '1.0-baseline'>		spec for: #common do: [		spec repository: 'dictionary://MB_Foo_Test_Repository'.		spec blessing: #baseline.		spec			package: 'MBFooTests';			yourself ].! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!project	"self reset"	| constructor project |	"Construct Metacello project"	project := MetacelloMCProject new.	"Allow for customization of #projectAttributes"	project projectAttributes: (Smalltalk at: #MBMonticelloPackagesResource) projectAttributes.	MetacelloVersionConstructor on: self project: project.	project loader: 		((project loaderClass new)			shouldDisablePackageCache: true;			yourself).	project loadType: #linear.	^project! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!symbolicVersionDevelopmentNotDefinedMBFooTest: spec	"self reset"	<symbolicVersion: #'development'>	spec for: #'common' version: #'notDefined'.! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!symbolicVersionStable11MBFooTest: spec	"self reset"	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!version10MBFooTest: spec	"self reset"	<version: '1.0' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.1'].! !!ConfigurationOfMBBranchTests methodsFor: 'cat'!version11MBFooTest: spec	"self reset"	<version: '1.1' imports: #('1.0-baseline')>	spec for: #'common' do: [		spec blessing: #release.		spec package: 'MBFooTests' with: 'MBFooTests-dkh.2'].! !"ConfigurationOfMBBranchTests"!"MBFooTests"!!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!otherField	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!otherField: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField put: anObject! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!oneByte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!oneByte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!long	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!long: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!short	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!short: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!float	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!float: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!int64	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!int64: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64 put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!double	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!double: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!byte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!byte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte put: anObject! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!addr	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!addr: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1 put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!addr1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!addr1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!addr2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!addr2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2 put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!struct	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!struct: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!union	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!union: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:41'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34540411!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34540600!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34540799!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34541200!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34541640!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34543147!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34544656!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34549919!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34550802!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34551249!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34551447!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34551587!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34551778!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34551959!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34552124!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34552437!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'unloading Metacello' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34552824!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34556329!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34556518!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.	! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34556717!version100: spec	<version: '1.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'XML-Parser-NorbertHartl.141';				package: 'VersionnerTestXML-Tests-Parser' with: 'XML-Tests-Parser-JAA.14' 				].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'versions' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34557118!version101: spec	<version: '1.1' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15'. ].		! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34557558!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'New baseline to test use of baselines in numbered versions';				author: 'ChristopheDemarey';				timestamp: '25/02/2014';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34559065!baseline10: spec	<version: '1.0-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				description: 'Copy of ConfigurationOfXMLParser used with Versionner tests.';				author: 'ChristopheDemarey';				timestamp: '27/03/2013';				repository: 'http://www.smalltalkhub.com/mc/PharoExtras/XMLParser/main'.			spec project: 'XMLWriter'					with: [ spec 								className: 'ConfigurationOfVersionnerTestXMLWriter';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].			spec project: 'BitmapCharacterSet'					with: [ spec 								className: 'ConfigurationOfVersionnerTestBitmapCharacterSet';								versionString: #stable;								file: 'Versionner-Tests-Resources';								repository: 'http://www.smalltalkhub.com/mc/demarey/Versionner/main'.].						spec 				package: 'VersionnerTestXML-Parser' 				with: [spec 						requires: #('BitmapCharacterSet' 'XMLWriter')].				spec package: 'VersionnerTestXML-Tests-Parser'					with: [ spec requires: 'VersionnerTestXML-Parser' ].						spec				group: 'default' with: #('Core' 'Tests');				"default by default is equivalent to loading 'ALL' the packages still we added explicitly Tests to be loaded"				group: 'Core' with: #('VersionnerTestXML-Parser');				group: 'Tests' with: #('VersionnerTestXML-Tests-Parser') ].! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34560574!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34565837!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34566720!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'testing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34567167!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34567365!project	^self new project! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34567505!loadMostRecentCoreWithTests	^self project lastVersion load: #('Core' 'Tests')! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34567696!loadDefault	"self loadDefault"	^ self loadMostRecentCoreWithTests! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34567877!load	"self load"	^self project latestVersion load! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34568042!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34568355!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfVersionnerTestXMLParser class methodsFor: 'unloading Metacello' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34568742!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!ConfigurationOfVersionnerTestXMLParser methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:41'!testVersion: spec	<version: '3.0' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec				package: 'VersionnerTestXML-Parser' with: 'VersionnerTestXML-Parser-StephaneDucasse.142';				package: 'VersionnerTestXML-Tests-Parser' with: 'VersionnerTestXML-Tests-Parser-StephaneDucasse.15' ]! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34572687!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34573046!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34574471!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34574787!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34574970!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34575531!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34575666!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34576010!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34576364!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34576689!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34577060!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34577819!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:41'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34582486!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfDummyConfiguration methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34582845!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: '-- all --' stamp: 'MarcinKopacz 12/5/2015 19:41'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34584270!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34584586!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfDummyConfiguration class methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34584769!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfDummyConfiguration class methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34585330!project	^self new project! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34585465!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34585809!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'loading' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34586163!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34586488!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfDummyConfiguration class methodsFor: 'development support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34586859!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfDummyConfiguration class methodsFor: 'metacello tool support' stamp: 'MarcinKopacz 12/5/2015 19:41' prior: 34587618!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:41'!baseline10: spec         <version: '1.0-baseline'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!ConfigurationOfDummyConfiguration methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:41'!default: spec         <version: 'default'>                spec for: #common do: [                spec blessing: #baseline.                spec repository: 'http://www.squeaksource.com/Versionner'.		    spec package: 'Collections-Streams'.                ].! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41'!foo ^42! !!TestClass methodsFor: '*Test1-TAG1' stamp: 'MarcinKopacz 12/5/2015 19:41'!foo ^42! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41'!foo ^42! !!TestClass methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:41'!foo ^42! !!TestClassOther methodsFor: '*Test1-TAG1' stamp: 'MarcinKopacz 12/5/2015 19:41'!bar ^42! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:42'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: 'classic' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!otherField	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!otherField: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField put: anObject! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!oneByte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!oneByte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!long	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!long: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!short	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!short: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!float	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!float: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!int64	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!int64: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64 put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!double	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!double: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!byte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!byte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte put: anObject! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!addr	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!addr: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1 put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!addr1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!addr1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!addr2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!addr2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2 put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!struct	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!struct: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!union	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!union: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!NBTestStructureWithPointer1 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructureWithPointer1 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:42'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:42'!newMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:42'!stubMethod ^nil! !!SlotTestsClassA commentStamp: nil prior: 0!A class Comment!!SlotTestsClassA commentStamp: 'BenComan 1/28/2015 00:18' prior: 0!A class Comment!!SlotTestsClassA class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!a ^a! !!SlotTestsClassA class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!b ^b! !!SlotTestsClassA class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!one ^One! !!SlotTestsClassA class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!var:x  Var:=x! !!SlotTestsClassA class methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!var  ^Var! !!ConfigurationOfA methodsFor: 'baselines' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34171851!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/dummy/A/main'. ].! !!ConfigurationOfA methodsFor: 'symbolic versions' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34172127!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:44'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:44' prior: 34633399!initialize	super initialize.	self class initializeSlots: self.! !!SlotTestsClassA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!slot1	 ^slot1! !!SlotTestsClassA methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!slot1: anObject	slot1:= anObject.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:44'!initialize	super initialize.! !!SlotTestsClassA methodsFor: 'initialization' stamp: 'Generated 12/5/2015 19:44' prior: 34633896!initialize	super initialize.	self class initializeSlots: self.! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!anotherMethodDefinedInP1 ^ #anotherMethodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2DefinedInP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2DefinedInP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!classSideMethodDefinedInP3 ^ #classSideMethodDefinedInP3! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!QuadrangleForTesting methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!intersect:aPoint ^ false! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34638555!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!TD methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!d! !!Trait method!d! !!TC methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!c! !!Trait method!d! !!TB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!b! !!Trait method!d! !!Trait method!cc! !!Trait method!b! !!TA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!a! !!CA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!ca! !!Trait method!d! !!Trait method!cc! !!Trait method!b! !!Trait method!a! !!CB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!cb! !!Trait method!d! !!Trait method!c! !!TD methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!d! !!Trait method!d! !!TB methodsFor: 'cat1' stamp: '' prior: 34641238!d! !!TB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!b! !!Trait method!d! !!TC methodsFor: 'cat1' stamp: '' prior: 34641380!d! !!TC methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!c! !!Trait method!d	self traitConflict ! !!Trait method!b! !!Trait method!cc! !!TA methodsFor: 'cat1' stamp: '' prior: 34641522!d! !!TA methodsFor: 'cat1' stamp: '' prior: 34641583!cc! !!TA methodsFor: 'cat1' stamp: '' prior: 34641563!b! !!TA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!a! !!CA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!ca! !!Trait method!d! !!Trait method!cc! !!Trait method!b! !!Trait method!a! !!CB methodsFor: 'cat1' stamp: '' prior: 34641925!cc! !!CB methodsFor: 'cat1' stamp: '' prior: 34641946!b! !!CB methodsFor: 'cat1' stamp: '' prior: 34641905!d! !!CB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!cb! !!CB methodsFor: 'cat1' stamp: '' prior: 34641966!a! !!Trait method!d! !!Trait method!c! !!CB class methodsFor: 'cat1' stamp: '' prior: 34642275!d! !!CB class methodsFor: 'cat1' stamp: '' prior: 34642295!c! !----End fileIn----!!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34643303!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!TD methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!d! !!Trait method!d! !!TC methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!c! !!Trait method!d! !!TB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!b! !!Trait method!d! !!Trait method!b! !!Trait method!cc! !!TA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!a! !!CA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!ca! !!Trait method!d! !!Trait method!cc! !!Trait method!b! !!Trait method!a! !!CB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!cb! !!Trait method!d! !!Trait method!c! !!T6 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!localMethod: argument ^argument! !!T6 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!localClassSideMethod: argument ^argument! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T6 methodsFor: 'cat3' stamp: '' prior: 34646214!m13 ^self m12! !!T6 methodsFor: 'cat2' stamp: '' prior: 34646131!m12 ^12! !!T6 methodsFor: 'cat2' stamp: '' prior: 34646157!m22 ^22! !!T6 methodsFor: 'cat2' stamp: '' prior: 34646183!m22Alias ^22! !!T6 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!localMethod: argument ^argument! !!T6 methodsFor: 'cat1' stamp: '' prior: 34646272!m21 ^21! !!T6 methodsFor: 'cat1' stamp: '' prior: 34646246!m11 ^11! !!T6 classTrait methodsFor: 'as yet unclassified' stamp: '' prior: 34646298!m2ClassSide: a ^a! !!T6 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!localClassSideMethod: argument ^argument! !----End fileIn----!!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34647918!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!TD methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!d! !!Trait method!d! !!TC methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!c! !!Trait method!d! !!TB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!b! !!Trait method!d! !!Trait method!cc! !!Trait method!b! !!TA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!a! !!CA methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!ca! !!Trait method!d! !!Trait method!cc! !!Trait method!b! !!Trait method!a! !!CB methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!cb! !!Trait method!d! !!Trait method!c! !!C2 methodsFor: 'xxx' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34648875!m12 ^0! !!Trait method!m12 ^12! !!T5 methodsFor: 'xxx' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34648168!m12 ^0! !!Trait method!m12 ^0! !!Trait method!m12 ^12! !!Trait method!m12 ^12! !!Trait method!m12 ^12! !!ClassForTestToBeDeleted209 class methodsFor: ''!m  ^ 42! !!ClassForTestToBeDeleted210 class methodsFor: ''!m    ^    42   ! !!ClassForTestToBeDeleted211 methodsFor: ''!m  ^ 42! !!ClassForTestToBeDeleted212 methodsFor: ''!m    ^    42   ! !!ClassForTestToBeDeleted213 methodsFor: ''!m  ^ 42! !!ClassForTestToBeDeleted214 methodsFor: ''!m  ^ [ 42 ]! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34652012!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m2ClassSide: a ^a! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!X methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^17! !!C2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34654415!m51 ^19! !!Trait method!m2ClassSide: a ^a! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34655936!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34658739!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m22Alias ^22! !!Trait method!m2ClassSide: a ^a! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34661777!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m22Alias ^22! !!Trait method!m2ClassSide: a ^a! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34664783!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T5 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34665332!m52 ^self! !!Trait method!m52 ^self! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!local2 ^self! !!Trait method!local2 ^self! !!Trait method!local2 ^self! !!Trait method!local2 ^self! !!Trait method!local2 ^self! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34667905!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T1 methodsFor: 'category1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m1! !!Trait method!m1! !!Trait method!m1! !!Trait method!m1! !!Trait method!m1! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34670865!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34673700!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^999! !!Trait method!m12 ^12! !!Trait method!m13 ^self m12! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34676649!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!zork ^false! !!Trait method!zork ^false! !!Trait method!zork ^false! !!Trait method!zork ^false! !!Trait method!zork ^false! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34676138!m21 ^99! !!Trait method!m21 ^99! !!Trait method!m21 ^99! !!Trait method!m21 ^99! !!Trait method!m21 ^99! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34679840!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m22Alias ^22! !!Trait method!m2ClassSide: a ^a! !!T2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34679434!m22 ^17! !!Trait method!m22 ^17! !!Trait method!m22Alias ^17! !!Trait method!m22 ^17! !!Trait method!m22Alias ^17! !!Trait method!m22 ^17! !!Trait method!m22 ^17! !!Trait method!m22 ^17! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34683142!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m13 ^self m12! !!Trait method!aliasM11 ^11! !!T1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34682438!m11 ^17! !!Trait method!m11 ^17! !!Trait method!m11 ^17! !!Trait method!aliasM11 ^17! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34686253!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34689414!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!C2 methodsFor: 'xxx' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34690403!m12 ^0! !!Trait method!m12 ^12! !!T5 methodsFor: 'xxx' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34689696!m12 ^0! !!Trait method!m12 ^0! !!Trait method!m12 ^12! !!Trait method!m12 ^12! !!Trait method!m12 ^12! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34692520!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34695797!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34698600!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m13 ^self m12! !!Trait method!m13Alias ^self m12! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34701472!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!Trait method!m33 ^33! !!Trait method!m31 ^31! !!Trait method!m32 ^32! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34704665!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m13 ^self m12! !!Trait method!m11 ^11! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T1 commentStamp: '<historical>' prior: 0!I am the trait T1!!T1 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m11 ^11! !!T1 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m12 ^12! !!T1 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m13 ^self m12! !!T2 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m21 ^21! !!T2 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m22 ^22! !!T2 classTrait methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!m2ClassSide: a ^a! !!T3 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m31 ^31! !!T3 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m32 ^32! !!T3 methodsFor: 'cat3' stamp: 'MarcinKopacz 12/5/2015 19:44'!m33 ^33! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T4 methodsFor: 'catX' stamp: 'MarcinKopacz 12/5/2015 19:44' prior: 34707436!m11 ^41! !!T4 methodsFor: 'cat2' stamp: 'MarcinKopacz 12/5/2015 19:44'!m42 ^42! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m51 ^super foo! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m52 ^ self class bar! !!T5 methodsFor: 'cat1' stamp: 'MarcinKopacz 12/5/2015 19:44'!m53 ^ self class bar! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m22Alias ^22! !!Trait method!m11 ^11! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m2ClassSide: a ^a! !!C1 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^true! !!Trait method!m12 ^12! !!Trait method!m22 ^22! !!Trait method!m52 ^ self class bar! !!Trait method!m53 ^ self class bar! !!Trait method!m13 ^self m12! !!Trait method!m21 ^21! !!Trait method!m51 ^super foo! !!Trait method!m2ClassSide: a ^a! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^false! !!C2 methodsFor: 'private' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self foo! !!C3 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self bla! !!C4 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blew! !!C5 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self blah! !!C6 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^self x! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^3! !!C7 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^super foo! !!C8 methodsFor: 'accessing' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^self blah! !!T5 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!foo ^123! !!Trait method!foo ^123! !!FooForTest methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^42! !!FooForTest2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:44'!bar ^42! !!FLTraitForTestingMain classTrait methodsFor: ''!you! !!FLTraitForTestingMain classTrait methodsFor: ''!you! !!FLTraitForTestingMain methodsFor: ''!you! !!FLTraitForTestingMain methodsFor: ''!you! !!NewTrait methodsFor: 'trait category' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!NewTrait methodsFor: 'classic protocol' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!NewTrait methodsFor: 'classic protocol' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!NewTrait methodsFor: 'classic protocol' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!NewClass methodsFor: 'classic protocol' stamp: 'MarcinKopacz 12/5/2015 19:45' prior: 34710472!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!NewTrait methodsFor: 'classic protocol' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!Trait method!stubMethod ^nil! !!A1InPackageP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!newlyAddedToA1 ^ #methodDefinedInP1! !!A1InPackageP1 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!newlyAddedToA1Class ^ #methodDefinedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodPackagedInP1 ^ #methodPackagedInP1! !!B2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodPackagedInP1 ^ #methodPackagedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!B2InPackageP2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45'!firstMethodInB2PackagedInP1 ^ 1! !!B2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!secondMethodInB2PackagedInP1 ^ 2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodPackagedInP1 ^ #methodPackagedInP1! !!B2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodPackagedInP1 ^ #methodPackagedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!B2InPackageP2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45'!firstMethodInB2PackagedInP1 ^ 1! !!B2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!secondMethodInB2PackagedInP1 ^ 2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!B2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!firstMethodInB2PackagedInP1 ^ 1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodPackagedInP1 ^ #methodPackagedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP2 ^ #methodDefinedInP2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP3 ^ #methodDefinedInP3! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodPackagedInP1 ^ #methodPackagedInP1! !!A1DefinedInP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!foo ^ 10! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!method ^ #methodDefinedInP2! !!A2InPackageP2 class methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!method ^ #methodDefinedInP2! !!A2InPackageP2 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!methodDefinedInP1 ^ #methodDefinedInP1! !!A1InPackageP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!newlyAddedToA1 ^ #methodDefinedInP1! !!A1InPackageP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!newlyAddedToA1 ^ #methodDefinedInP1! !!A1InPackageP1 methodsFor: 'not defined category' stamp: 'MarcinKopacz 12/5/2015 19:45'!newlyAddedToA1 ^ #methodDefinedInP1! !!NewClass methodsFor: '*XXXXX-YYYY' stamp: 'MarcinKopacz 12/5/2015 19:45'!newMethod ^nil! !!NewClass methodsFor: '*YYYYY-subcategory' stamp: 'MarcinKopacz 12/5/2015 19:45'!newMethod ^nil! !!NewClass methodsFor: '*SomethingDifferentNothingToDoWithWhatWeHave' stamp: 'MarcinKopacz 12/5/2015 19:45'!newMethod ^nil! !!NewClass methodsFor: '*SomethingDifferentNothingToDoWithWhatWeHave' stamp: 'MarcinKopacz 12/5/2015 19:45'!newMethod ^nil! !!NewClass methodsFor: '*yyYyY' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: '*YYYYY' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: 'classic category' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45' prior: 34717215!stubMethod ^22222222222! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: '*XXXXX' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass class methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod2 ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod2 ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod2 ^nil! !!NewClass methodsFor: '*yyyyy' stamp: 'MarcinKopacz 12/5/2015 19:45'!stubMethod ^nil! !!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:45' prior: 34458621!one ^ 2! !!MCMockClassD methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:21' prior: 34284486!one	^ 1! !!MCMockClassE class methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:22' prior: 34284724!two	^ 2! !!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 34285530!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!!MCMockASubclass class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:23' prior: 34285887!initialize	InitializationOrder := InitializationOrder		ifNil: [ -100 ] "let the test fail"		ifNotNil: [ InitializationOrder + 1.]! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34286103!variables	^ x + Y + MCMockClassA! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34286219!variables2	^ ivar + CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'cwp 8/10/2003 02:31' prior: 34286332!cVar	^ CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: '10/14/2010 15:41' prior: 34286429!initializationOrder	^ InitializationOrder! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:21' prior: 34286572!initialize	CVar := #initialized.	InitializationOrder := 1.! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34286719!one	^ 1! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'stephaneducasse 2/4/2006 20:47' prior: 34286827!touchCVar	CVar := #touched! !!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34467714!a ^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 34287027!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: '' prior: 34287077!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 34287168!d	^ 'd'! !!MCMockClassA methodsFor: 'boolean' stamp: 'cwp 7/13/2003 02:49' prior: 34287246!falsehood	^ false! !!MCMockClassA methodsFor: 'boolean' stamp: 'ab 7/7/2003 23:21' prior: 34287332!moreTruth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 34718350!one	^ 1! !!MCMockClassA methodsFor: 'drag''n''drop' stamp: 'avi 9/23/2003 17:14' prior: 34287516!q! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 34287599!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 34287694!two	^ 2! !!MCMockClassB commentStamp: '' prior: 34287965!This comment has a bang!! Bang!! Bang!!!!MCSnapshotTest methodsFor: '*MonticelloMocks' stamp: 'cyrilledelaunay 1/21/2011 12:10' prior: 34288148!mockClassExtension	"I change the protocol of this method to resolve the failing test: MCChangeNotificationTest >> testExtMethodModified. This test basically test that when we modified an extension method, the extended package is marked as 'modified'. The problem is that Monticello treat differently a classic method from an extension method, and this only by checking if the protocol name start with a star. Therefore, if the protocol does not match the extending package name, the extending package name will never be notified, and the test will fail. " ! !----End fileIn----!!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:45' prior: 34720646!one ^ 2! !!MCMockClassD methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:21' prior: 34718454!one	^ 1! !!MCMockClassE class methodsFor: 'as yet unclassified' stamp: 'cwp 7/8/2003 21:22' prior: 34718565!two	^ 2! !!MCMockClassA commentStamp: 'cwp 8/10/2003 16:43' prior: 34718644!This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.!!MCMockASubclass class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:23' prior: 34718871!initialize	InitializationOrder := InitializationOrder		ifNil: [ -100 ] "let the test fail"		ifNotNil: [ InitializationOrder + 1.]! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34719103!variables	^ x + Y + MCMockClassA! !!MCMockASubclass methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34719235!variables2	^ ivar + CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'cwp 8/10/2003 02:31' prior: 34719364!cVar	^ CVar! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: '10/14/2010 15:41' prior: 34719477!initializationOrder	^ InitializationOrder! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'pavel.krivanek 10/14/2010 16:21' prior: 34719636!initialize	CVar := #initialized.	InitializationOrder := 1.! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'ab 7/7/2003 23:21' prior: 34719799!one	^ 1! !!MCMockClassA class methodsFor: 'as yet unclassified' stamp: 'stephaneducasse 2/4/2006 20:47' prior: 34719923!touchCVar	CVar := #touched! !!MCMockClassA methodsFor: 'numeric' stamp: 'MarcinKopacz 12/5/2015 19:40' prior: 34720045!a ^ 'a2'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:29' prior: 34720151!b	^ 'b1'! !!MCMockClassA methodsFor: 'numeric' stamp: '' prior: 34720227!c	^ 'c1'! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 34720334!d	^ 'd'! !!MCMockClassA methodsFor: 'boolean' stamp: 'cwp 7/13/2003 02:49' prior: 34720428!falsehood	^ false! !!MCMockClassA methodsFor: 'boolean' stamp: 'ab 7/7/2003 23:21' prior: 34720530!moreTruth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:22' prior: 34721836!one	^ 1! !!MCMockClassA methodsFor: 'drag''n''drop' stamp: 'avi 9/23/2003 17:14' prior: 34720746!q! !!MCMockClassA methodsFor: 'boolean' stamp: 'GuillermoPolito 8/24/2012 15:31' prior: 34720845!truth	^ true! !!MCMockClassA methodsFor: 'numeric' stamp: 'GuillermoPolito 8/24/2012 15:28' prior: 34720956!two	^ 2! !!MCMockClassB commentStamp: '' prior: 34721016!This comment has a bang!! Bang!! Bang!!!!MCSnapshotTest methodsFor: '*MonticelloMocks' stamp: 'cyrilledelaunay 1/21/2011 12:10' prior: 34721162!mockClassExtension	"I change the protocol of this method to resolve the failing test: MCChangeNotificationTest >> testExtMethodModified. This test basically test that when we modified an extension method, the extended package is marked as 'modified'. The problem is that Monticello treat differently a classic method from an extension method, and this only by checking if the protocol name start with a star. Therefore, if the protocol does not match the extending package name, the extending package name will never be notified, and the test will fail. " ! !----End fileIn----!!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!otherField	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!otherField: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #otherField put: anObject! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!oneByte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte! !!NBTestNestedStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!oneByte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #oneByte put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!long	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!long: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #long put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!short	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!short: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #short put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!float	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!float: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #float put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!int64	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!int64: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #int64 put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!double	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!double: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #double put: anObject! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!byte	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte! !!NBTestStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!byte: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #byte put: anObject! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure1byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!addr	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr! !!NBTestStructure2 methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!addr: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestStructure9bytes methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestStructureWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field1 put: anObject! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2! !!NBTestUnion1Byte methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field2 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!addr1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!addr1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr1 put: anObject! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!addr2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2! !!NBTestUnion2Pointers methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!addr2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #addr2 put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!y	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!y: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #y put: anObject! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field! !!NBTestUnionIntSize methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!field: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #field put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!callback	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback! !!NBTestUnionWithCallback methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!callback: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #callback put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!struct	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!struct: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #struct put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithStructure methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!x: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #x put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!union	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!union: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #union put: anObject! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!z	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z! !!NBTestUnionWithUnion methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 12/5/2015 19:45'!z: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #z put: anObject! !!ClassForTestToBeDeleted216 class methodsFor: ''!m  ^ 42! !!ClassForTestToBeDeleted217 class methodsFor: ''!m  ^ 42! !!MySubclass1 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45'!method ^ 3! !!MySubclass2 methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45'!method ^ 5! !!MySuperclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45'!method ^ 2! !!MySuperclass methodsFor: 'as yet unclassified' stamp: 'MarcinKopacz 12/5/2015 19:45' prior: 34742872!method ^self subclassResponsibility! !