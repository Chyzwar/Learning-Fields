
- Tree Structure, find stuff, tree travel
- List of words get anagrams
- Design Monitoring System for Server Farm
- Tree structure and its runtime
- Given two sorted arrays if integers of  n find element that would be n after merge
- How to improve memory cost


- Given two linked lists of integers, how to find the length of the smallest list? Followed up by how do I find the list with the smallest sum.
- Second round: Implement an expression evaluator for arithmetic expressions. Followed up by, how would I add operator precedence and variables.  
- Third round: Given an array with a heap property, how do I insert and delete elements into the heap while maintaining the heap property. Followed up by, how to recursively delete the entire subtree.  

-Right a method that takes an int and an array and rotates the array right n times. Give an answer with constant space and linear time.  
-Tree traversal in OCAML and run times.  

-Select a random element from a stream with uniform probability (we only have access to the current element, and a function to get the next element which returns EOF when at the end of the stream).

-Given a list of N people. On the first day, divide them into N/2 groups, each group contains two people. On the day 2, divide them into groups of two again... Do this every day, until day N-1. In a way such that all pairs of people has been groupmates once.  
- What is 1,000,000 - 2435?  
- How would you reimplement the UNIX command cp ?  
- Write map.
- Write a binary tree and then write a function to get its depth.  
- Which 2-letter POSIX command is different from all the others?    

- There is a company, modelled as a tree of employees and the people reporting to them. Every employee has a fun value. At a party, every employee only has fun if his direct boss is not at the party, otherwise he adds fun corresponding to his fun value to the party. Write code to find the maximum total fun that can be had at the party.  

 def party_problem(head): if head is None: return 0 # get the value of the left tree l_val = party_problem(head.left) # get the value of the right tree r_val = party_problem(head.right) return max(head.data, l_val + r_val)

- Given a list of words as an input, group them by their anagrams.  
- Write a tail recursive version of the map function  
- Output the random permutation for a given string
- Write functions on binary trees in OCaml.  
- 10 ropes with red and blue end. red end can only connect blue end. what is the expected value of cycles?  
-  Implement a binary search tree.
-  Give the type of a binary tree and an algorithm to compute its depth , 
-  

